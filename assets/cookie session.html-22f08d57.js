import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as o,e as n}from"./app-4df96303.js";const i={},a=n(`<p>###Cookie和Session简介</p><h4 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie" aria-hidden="true">#</a> 1. Cookie</h4><p>Cookies用于解决HTTP协议无状态的问题。当用户登录成功后，服务器会返回一些数据（cookie）给浏览器，浏览器将其保存。随后的请求中，浏览器自动携带cookie，服务器通过这些数据识别用户。</p><ul><li><strong>限制</strong>: Cookie的数据量有限，通常不超过4KB，因此只能存储少量数据。</li></ul><h4 id="_2-session" tabindex="-1"><a class="header-anchor" href="#_2-session" aria-hidden="true">#</a> 2. Session</h4><p>Session用于存储用户信息，与Cookie类似但更安全，因为数据存储在服务器端。不同服务器和框架有不同的实现方式。</p><h4 id="_3-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-使用场景" aria-hidden="true">#</a> 3. 使用场景</h4><ul><li><strong>Server Side Session</strong>: 通过cookie存储session ID，数据存储在服务器的session中。</li><li><strong>Client Side Session</strong>: Session数据加密后存储在cookie中。</li></ul><h3 id="django中操作cookie" tabindex="-1"><a class="header-anchor" href="#django中操作cookie" aria-hidden="true">#</a> Django中操作Cookie</h3><h4 id="设置cookie" tabindex="-1"><a class="header-anchor" href="#设置cookie" aria-hidden="true">#</a> 设置Cookie</h4><p>使用<code>response.set_cookie</code>方法，参数包括：</p><ul><li><code>key</code>: Cookie的键名。</li><li><code>value</code>: Cookie的值。</li><li><code>max_age</code>: 生命周期（秒）。</li><li><code>expires</code>: 过期日期。</li><li><code>path</code>: 有效的路径。</li><li><code>domain</code>: 有效的域名。</li><li><code>secure</code>: 是否仅在HTTPS下有效。</li><li><code>httponly</code>: 是否禁止客户端脚本访问。</li></ul><h4 id="删除cookie" tabindex="-1"><a class="header-anchor" href="#删除cookie" aria-hidden="true">#</a> 删除Cookie</h4><p>使用<code>delete_cookie</code>，将cookie的值设置为空字符串，并设置过期时间为0。</p><h4 id="获取cookie" tabindex="-1"><a class="header-anchor" href="#获取cookie" aria-hidden="true">#</a> 获取Cookie</h4><p>通过<code>request.COOKIES</code>获取，这是一个字典类型对象。</p><h3 id="django中操作session" tabindex="-1"><a class="header-anchor" href="#django中操作session" aria-hidden="true">#</a> Django中操作Session</h3><p>Django的session默认存储在数据库中，通过session ID与cookie交互。操作session使用<code>request.session</code>，包括：</p><ul><li><code>get</code>: 获取值。</li><li><code>pop</code>: 删除值。</li><li><code>keys</code>: 获取所有键。</li><li><code>items</code>: 获取所有项。</li><li><code>clear</code>: 清除session数据。</li><li><code>flush</code>: 删除session及cookie中的session ID。</li><li><code>set_expiry</code>: 设置过期时间。</li><li><code>clear_expired</code>: 清理过期session。</li></ul><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取所有cookie</span>
cookies <span class="token operator">=</span> request<span class="token punctuation">.</span>COOKIES
<span class="token keyword">for</span> cookie_key<span class="token punctuation">,</span> cookie_value <span class="token keyword">in</span> cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie_key<span class="token punctuation">,</span> cookie_value<span class="token punctuation">)</span>

<span class="token comment"># 使用session</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改session的存储机制" tabindex="-1"><a class="header-anchor" href="#修改session的存储机制" aria-hidden="true">#</a> 修改Session的存储机制</h3><p>Django默认将Session数据存储在数据库中。但您可以通过设置<code>SESSION_ENGINE</code>来更改Session的存储位置。以下是几种可选的存储方案：</p><ol><li><strong>数据库存储</strong> (<code>django.contrib.sessions.backends.db</code>): 默认方案，Session数据存储在数据库中。</li><li><strong>文件存储</strong> (<code>django.contrib.sessions.backends.file</code>): Session数据存储在服务器的文件系统中。</li><li><strong>缓存存储</strong> (<code>django.contrib.sessions.backends.cache</code>): <ul><li>将Session数据存储在缓存中，如Memcached。</li><li>需要在<code>settings.py</code>中配置<code>CACHES</code>。</li></ul></li><li><strong>缓存数据库混合存储</strong> (<code>django.contrib.sessions.backends.cached_db</code>): <ul><li>首先将Session数据存储在缓存中，然后同步到数据库。</li><li>即使缓存系统出现问题，Session数据也不会丢失。</li></ul></li><li><strong>加密Cookie存储</strong> (<code>django.contrib.sessions.backends.signed_cookies</code>): <ul><li>将Session信息加密后存储在浏览器的Cookie中。</li><li>需要考虑安全性，建议设置<code>SESSION_COOKIE_HTTPONLY=True</code>以防止通过JavaScript操作Session数据。</li><li>保护<code>settings.py</code>中的<code>SECRET_KEY</code>，防止解密Session数据。</li><li>Cookie中存储的数据量不能超过4KB。</li></ul></li></ol><p>请注意，选择存储方案时，需要根据您的应用需求和安全要求来决定最合适的方法。</p>`,25),c=[a];function d(l,t){return s(),o("div",null,c)}const u=e(i,[["render",d],["__file","cookie session.html.vue"]]);export{u as default};
