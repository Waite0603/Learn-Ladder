import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as l,b as n,d as o,e as i,a as s}from"./app-58bc9475.js";const c={},u=s(`<h2 id="认识-vue" tabindex="-1"><a class="header-anchor" href="#认识-vue" aria-hidden="true">#</a> 认识 Vue</h2><h3 id="什么是-vue" tabindex="-1"><a class="header-anchor" href="#什么是-vue" aria-hidden="true">#</a> 什么是 Vue</h3><ul><li>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 <ul><li>全程是Vue.js或者Vuejs；</li><li>什么是渐进式框架呢？表示我们可以在项目中一点点来引入和使用Vue，而不一定需要全部使用Vue来开发整个 项目；</li></ul></li></ul><h3 id="vue3带来的变化" tabindex="-1"><a class="header-anchor" href="#vue3带来的变化" aria-hidden="true">#</a> Vue3带来的变化</h3><ul><li>源码通过monorepo的形式来管理源代码： <ul><li>Mono：单个</li><li>Repo：repository仓库</li><li>主要是将许多项目的代码存储在同一个 repository 中；</li><li>这样做的目的是多个包本身相互独立，可以有自己的功能逻辑、单元测试等，同时又在同一个仓库下方便管理；</li><li>而且模块划分的更加清晰，可维护性、可扩展性更强；</li></ul></li><li>源码使用TypeScript来进行重写： <ul><li>在Vue2.x的时候，Vue使用 Flow 来进行类型检测；</li><li>在Vue3.x的时候，Vue的源码全部使用 TypeScript 来进行重构，并且 Vue 本身对 TypeScript 支持也更好了；</li></ul></li></ul><h4 id="性能方面" tabindex="-1"><a class="header-anchor" href="#性能方面" aria-hidden="true">#</a> 性能方面</h4><ul><li>使用Proxy进行数据劫持 <ul><li>在 Vue2.x 的时候，Vue2 是使用 <code>Object.defineProperty</code> 来劫持数据的 getter 和 setter 方法的；</li><li>这种方式一致存在一个缺陷就是当给对象添加或者删除属性时，是无法劫持和监听的；</li><li>所以在 Vue2.x 的时候，不得不提供一些特殊的API，比如 <code>$set</code> 或 <code>$delete</code> ，事实上都是一些 hack 方法，也增加了 开发者学习新的API的成本；</li><li>而在 Vue3.x 开始，Vue 使用 Proxy 来实现数据的劫持</li></ul></li><li>删除了一些不必要的API： <ul><li>移除了实例上的 <code>$on</code> , <code>$off</code> 和 <code>$once</code>；</li><li>移除了一些特性：如filter、内联模板等；</li></ul></li><li>包括编译方面的优化： <ul><li>生成Block Tree、Slot编译优化、diff算法优化；</li></ul></li></ul><h4 id="新的api" tabindex="-1"><a class="header-anchor" href="#新的api" aria-hidden="true">#</a> 新的API</h4><ul><li>由Options API 到 Composition API： <ul><li>在 Vue2.x 的时候，我们会通过 Options API 来描述组件对象；</li><li>Options API 包括data、props、methods、computed、生命周期等等这些选项；</li><li>存在比较大的问题是多个逻辑可能是在不同的地方： <ul><li>比如created中会使用某一个method来修改data的数据，代码的内聚性非常差；</li></ul></li><li>Composition API可以将 相关联的代码 放到同一处 进行处理，而不需要在多个Options之间寻找；</li></ul></li><li>Hooks函数增加代码的复用性： <ul><li>在Vue2.x的时候，我们通常通过mixins在多个组件之间共享逻辑；但是有一个很大的缺陷就是 mixins也是由一大堆的Options组成的，并且多个mixins会存在命名冲突的问题；</li><li>在Vue3.x中，我们可以通过Hook函数，来将一部分独立的逻辑抽取出去，并且它们还可以做到是响应式的；</li></ul></li></ul><h2 id="如何使用-vue" tabindex="-1"><a class="header-anchor" href="#如何使用-vue" aria-hidden="true">#</a> 如何使用 Vue</h2><ol><li>方式一：在页面中通过CDN的方式来引入；</li><li>方式二：下载Vue的JavaScript文件，并且自己手动引入；</li><li>方式三：通过npm包管理工具安装使用它；</li><li>方式四：直接通过Vue CLI创建项目，并且使用它；</li></ol><h3 id="cdn-引入" tabindex="-1"><a class="header-anchor" href="#cdn-引入" aria-hidden="true">#</a> CDN 引入</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@next<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="下载和引入" tabindex="-1"><a class="header-anchor" href="#下载和引入" aria-hidden="true">#</a> 下载和引入</h3><ul><li>下载Vue的源码，可以直接打开CDN的链接： <ul><li>打开链接，复制其中所有的代码；</li><li>创建一个新的文件，比如vue.js，将代码复制到其中；</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="声明式编程和命令式编程" tabindex="-1"><a class="header-anchor" href="#声明式编程和命令式编程" aria-hidden="true">#</a> 声明式编程和命令式编程</h2><ul><li>原生开发和Vue开发的模式和特点,我们会发现是完全不同的,这里其实涉及到两种不同的编程范式命令式编程和声明式编程</li><li>命令式编程关注的是“ how to do”,声明式编程关注的是&quot; what to do&quot;,由框架(机器)完成&quot;how&quot;的过程</li></ul><h2 id="mvvm模型" tabindex="-1"><a class="header-anchor" href="#mvvm模型" aria-hidden="true">#</a> MVVM模型</h2><ul><li>MVC和MVVM都是一种软件的体系结构 <ul><li>MVC是 Model-View-Controller的简称,是在前期被使用非常框架的架构模式,比如iS、前端</li><li>MVVM是 Model-View- ViewMode的简称,是目前非常流行的架构模式</li></ul></li><li>通常情况下,我们也经常称vue是一个MVVM的框架 <ul><li>vue官方其实有说明,vue虽然并没有完全遵守MVVM的模型,但是整个设计是受到它的启发的</li></ul></li></ul><figure><img src="https://qiniu.waite.wang/202310161331268.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="template属性" tabindex="-1"><a class="header-anchor" href="#template属性" aria-hidden="true">#</a> template属性</h2><ul><li>在使用 createApp的时候,我们传入了一个对象,接下来我们详细解析一下之前传入的属性分别代表什么含义。 <ul><li>template属性:表示的是Vue需要帮助我们渲染的模板信息</li><li>目前我们看到它里面有很多的HTML标签,这些标签会替换掉我们挂载到的元素(比如id为app的dⅳv)的innerHTML</li><li>模板中有一些奇怪的语法,比如{},比如@ )click,这些都是模板特有的语法</li></ul></li><li>但是这个模板的写法有点过于别扭了,并且IDE很有可能没有任何提示,阻碍我们编程的效率</li><li>vue提供了两种方式:</li><li>方式一:使用 script标签,并且标记它的类型为 X-template;</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hhhh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
 
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x-template<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>why<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
     <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&#39;increment&#39;</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&#39;decrement&#39;</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js//Vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
     Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#why&#39;</span><span class="token punctuation">,</span>
       <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span><span class="token punctuation">{</span>
           <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
           <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">100</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span>
   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式二:使用任意标签(通常使用 template标签,因为不会被浏览器渲染),设置id;v template元素是一种用于保存客户端内容的机制,该内容再加载页面时不会被呈现,但随后可以在运行时使用 JavaScript 实例化</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>why<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>increment<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>decrement<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
 
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js//Vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
     Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#why&#39;</span><span class="token punctuation">,</span>
       <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span><span class="token punctuation">{</span>
           <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
           <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">100</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span>
   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="data属性" tabindex="-1"><a class="header-anchor" href="#data属性" aria-hidden="true">#</a> data属性</h2><ul><li><p>data属性是传入一个函数,并且该函数需要返回一个对象</p><ul><li>在Vue2x的时候,也可以传入一个对象(虽然官方推荐是一个函数);</li><li>在Vue3x的时候,必须传入一个函数,否则就会直接在浏览器中报错</li></ul></li><li><p>data中返回的对象会被vue的响应式系统劫持,之后对该对象的修改或者访问都会在劫持中被处理</p><ul><li>所以我们在 template中通过{ counter} 访问 counter,可以从对象中获取到数据</li><li>所以我们修改 counter的值时, template中的{ counter)也会发生改变;</li></ul></li></ul><h2 id="methods属性-重点" tabindex="-1"><a class="header-anchor" href="#methods属性-重点" aria-hidden="true">#</a> methods属性（重点）</h2>`,29),r=s("<li><p>methods属性是一个对象,通常我们会在这个对象中定义很多的方法</p><ul><li>这些方法可以被绑定到 template模板中;</li><li>在该方法中,我们可以使用this关键字来直接访问到data中返回的对象的属性;</li></ul></li><li><p>问题：官方文档有这个描述，即不能使用箭头函数</p></li><li><p>为什么不能使用箭头函数(VUE3.0)？</p></li><li><p>我们在methods中要使用data返回对象中的数据：</p><ul><li>那么这个this是必须有值的，并且应该可以通过this获取到data返回对象中的数据。</li></ul></li><li><p>那么我们这个this能不能是window呢？</p><ul><li>不可以是window，因为window中我们无法获取到data返回对象中的数据；</li><li>但是如果我们使用箭头函数，那么这个this就会是window了；</li></ul></li><li><p>为什么是window呢？</p><ul><li>这里涉及到箭头函数使用this的查找规则，它会在自己的上层作用于中来查找this；</li><li>最终刚好找到的是script作用于中的this，所以就是window；</li></ul></li>",6),d=n("p",null,"this到底是如何查找和绑定的呢？",-1),k={href:"https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,[n("strong",null,"不使用箭头函数的情况下，this到底指向什么")]),n("ul",null,[n("li",null,"事实上Vue的源码当中就是对methods中的所有函数进行了遍历，并且通过 bind 绑定了 this")])],-1),m=s(`<blockquote><p>具体看 https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// window 隐式绑定</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
  Window{}
  {bar: f()}
*/</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> foo2
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
  Window{}
  Window{}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写dom元素的模板方式" tabindex="-1"><a class="header-anchor" href="#编写dom元素的模板方式" aria-hidden="true">#</a> 编写DOM元素的模板方式</h2><ol><li>方式一：template模板的方式：使用 <code>&lt;template&gt;</code> 标签编写模板。这种方式是之前经常使用的方式。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ description }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>方式二：render函数的方式：使用h函数来编写渲染的内容。在这种方式中，h函数可以直接返回一个虚拟节点（Vnode节点）。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>方式三：通过.vue文件中的template来编写模板：在.vue文件中使用<code>&lt;template&gt;</code>标签编写模板。这种方式需要通过特定的代码来对模板进行解析：</li></ol><ul><li>对于方式三，即.vue文件中的template，可以通过vue-loader对其进行编译和处理。</li><li>对于方式一，即template模板，我们必须通过源码中的一部分代码来进行编译。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ description }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，Vue在让我们选择版本时，提供了&quot;运行时+编译器&quot;和&quot;仅运行时&quot;两种选项：</p><ul><li><strong>运行时+编译器</strong>：这个版本包含了Vue的完整功能，包括对template模板的编译代码。在使用这个版本时，我们可以直接在代码中使用template模板，并且Vue会在运行时将其编译成渲染函数。这使得我们可以在开发过程中更方便地编写和调试模板。然而，由于包含了编译代码，这个版本的文件体积相对较大。</li><li><strong>仅运行时</strong>：这个版本不包含对template模板的编译代码。它更小巧，文件体积更小。在使用这个版本时，我们需要使用render函数来手动编写渲染逻辑，而不是直接使用template模板。这意味着我们需要更多的代码来实现相同的功能，但也带来了更好的性能和更小的文件大小。</li><li>选择哪个版本取决于项目的需求和优化目标。如果我们需要更完整的功能，并且对文件大小没有太大的担忧，可以选择运行时+编译器版本。如果我们对文件大小敏感，并且愿意手动编写渲染逻辑，可以选择仅运行时版本。</li></ul><h2 id="vscode对sfc文件的支持" tabindex="-1"><a class="header-anchor" href="#vscode对sfc文件的支持" aria-hidden="true">#</a> VSCode对SFC文件的支持</h2><blockquote><p>Vue 的单文件组件 (即 *.vue 文件，英文 Single-File Component，简称 SFC) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p></blockquote><blockquote><p>为什么要使用 SFC​ 使用 SFC 必须使用构建工具，但作为回报带来了以下优点：</p><ul><li><p>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</p></li><li><p>让本来就强相关的关注点自然内聚</p></li><li><p>预编译模板，避免运行时的编译开销</p></li><li><p>组件作用域的 CSS</p></li><li><p>在使用组合式 API 时语法更简单</p></li><li><p>通过交叉分析模板和逻辑代码能进行更多编译时优化</p></li><li><p>更好的 IDE 支持，提供自动补全和对模板中表达式的类型检查</p></li><li><p>开箱即用的模块热更新 (HMR) 支持</p></li><li><p>SFC 是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：</p></li><li><p>单页面应用 (SPA)</p></li><li><p>静态站点生成 (SSG)</p></li><li><p>任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目</p></li></ul><p>https://cn.vuejs.org/guide/scaling-up/sfc.html</p></blockquote><ol><li>插件一：Vetur，从Vue2开发就一直在使用的VSCode支持Vue的插件；</li><li>插件二：Volar，官方推荐的插件（后续会基于Volar开发官方的VSCode插件）；</li></ol><h2 id="如何阅读vue源码" tabindex="-1"><a class="header-anchor" href="#如何阅读vue源码" aria-hidden="true">#</a> 如何阅读Vue源码</h2><ul><li>需要的环境 npm，yarn</li><li>操作步骤 <ol><li>安装yarn npm install yarn -g</li><li>在项目中配置yarn yarn install</li><li>在package.json中的dev后加上--sourcemap</li><li>打包项目 yarn dev （在vue/dist文件夹下有两个文件，vue.global.js和vue.global.js.map）</li><li>在vue/examplex新建自己的文件夹以及测试demo</li><li>在demo中打下断点—debugger</li><li>在浏览器中打开调试面板，选择其中的source面板，查看执行对应的源码</li></ol></li></ul>`,18);function g(h,b){const a=p("ExternalLinkIcon");return e(),l("div",null,[u,n("ul",null,[r,n("li",null,[d,n("ul",null,[n("li",null,[n("a",k,[o("前端面试之彻底搞懂this指向"),i(a)])])])]),v]),m])}const y=t(c,[["render",g],["__file","邂逅 Vue 开发.html.vue"]]);export{y as default};
