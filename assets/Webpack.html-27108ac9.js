import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as o,b as s,d as a,e,a as l}from"./app-48b04ccd.js";const c={},r=l('<h2 id="认识webpack" tabindex="-1"><a class="header-anchor" href="#认识webpack" aria-hidden="true">#</a> 认识webpack</h2><ul><li><p>事实上随着前端的快速发展，目前前端的开发已经变的越来越复杂了：</p><ul><li>比如开发过程中我们需要通过模块化的方式来开发；</li><li>比如也会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过ES6+、TypeScript开发脚本逻辑， 通过sass、less等方式来编写 css 样式代码；</li><li>比如开发过程中，我们还希望实时的监听文件的变化来并且反映到浏览器上，提高开发的效率；</li><li>比如开发完成后我们还需要将代码进行压缩、合并以及其他相关的优化；</li></ul></li><li><p>但是对于很多的前端开发者来说，并不需要思考这些问题，日常的开发中根本就没有面临这些问题：</p><ul><li>这是因为目前前端开发我们通常都会直接使用三大框架来开发：Vue、React、Angular；</li><li>但是事实上，这三大框架的创建过程我们都是借助于脚手架（CLI）的；</li><li>事实上Vue-CLI、create-react-app、Angular-CLI都是基于webpack来帮助我们支持模块化、less、 TypeScript、打包优化等的；</li></ul></li></ul><h2 id="webpack到底是什么呢" tabindex="-1"><a class="header-anchor" href="#webpack到底是什么呢" aria-hidden="true">#</a> Webpack到底是什么呢？</h2><blockquote><p>https://webpack.docschina.org/</p></blockquote>',4),u=s("strong",null,"webpack",-1),d=s("em",null,"静态模块打包工具",-1),k={href:"https://webpack.docschina.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer"},v=s("em",null,"bundles",-1),b=s("ul",null,[s("li",null,"打包bundler：webpack可以将帮助我们进行打包，所以它是一个打包工具"),s("li",null,"模块化module：webpack默认支持各种模块化开发，ES Module、CommonJS、AMD等；")],-1),m=l('<figure><img src="https://qiniu.waite.wang/202311021029845.png" alt="image-20231102102926580" tabindex="0" loading="lazy"><figcaption>image-20231102102926580</figcaption></figure><h2 id="vue项目加载的文件有哪些呢" tabindex="-1"><a class="header-anchor" href="#vue项目加载的文件有哪些呢" aria-hidden="true">#</a> Vue项目加载的文件有哪些呢？</h2><ul><li>JavaScript的打包： <ul><li>将ES6转换成ES5的语法；</li><li>TypeScript的处理，将其转换成JavaScript；</li></ul></li><li>Css的处理： <ul><li>CSS文件模块的加载、提取；</li><li>Less、Sass等预处理器的处理；</li></ul></li><li>资源文件img、font： <ul><li>图片img文件的加载；</li><li>字体font文件的加载；</li></ul></li><li>HTML资源的处理： <ul><li>打包HTML资源文件；</li></ul></li><li>处理vue项目的SFC文件.vue文件</li></ul><h2 id="webpack的使用" tabindex="-1"><a class="header-anchor" href="#webpack的使用" aria-hidden="true">#</a> Webpack的使用</h2>',4),g={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://webpack.docschina.org/",target:"_blank",rel:"noopener noreferrer"},f=s("li",null,"所以我们需要先安装Node.js，并且同时会安装npm；",-1),x={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},y=l(`<h3 id="webpack的安装" tabindex="-1"><a class="header-anchor" href="#webpack的安装" aria-hidden="true">#</a> Webpack的安装</h3><ul><li>webpack的安装目前分为两个：webpack、webpack-cli</li><li>执行webpack命令，会执行node_modules下的.bin目录下的webpack；</li><li>webpack在执行时是依赖webpack-cli的，如果没有安装就会报错；</li><li>而webpack-cli中代码执行时，才是真正利用webpack进行编译和打包的过程；</li><li>所以在安装webpack时，我们需要同时安装webpack-cli（第三方的脚手架事实上是没有使用webpack-cli的，而是类似于自 己的vue-service-cli的东西）</li></ul><figure><img src="https://qiniu.waite.wang/202311051542731.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="webpack的默认打包" tabindex="-1"><a class="header-anchor" href="#webpack的默认打包" aria-hidden="true">#</a> Webpack的默认打包</h3><blockquote><p>ES6、CommonJS等模块化语法在浏览器中是不被直接识别的，但是通过使用Webpack的打包功能，可以将这些语法转换为浏览器可以识别的语法。Webpack可以将多个模块打包成一个或多个浏览器可识别的文件，使得在浏览器中可以正常运行这些模块化代码。</p></blockquote><ul><li><p>我们可以通过webpack进行打包，之后运行打包之后的代码</p><ul><li>在目录下直接执行 webpack 命令</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>生成一个 dist 文件夹，里面存放一个main.js的文件，就是我们打包之后的文件：</p><ul><li>这个文件中的代码被压缩和丑化了；</li><li>另外我们发现代码中依然存在ES6的语法，比如箭头函数、const等，这是因为默认情况下webpack并不清楚我们打包后的文 件是否需要转成ES5之前的语法，后续我们需要通过babel来进行转换和设置；</li></ul></li><li><p>我们发现是可以正常进行打包的，但是有一个问题，webpack是如何确定我们的入口的呢？</p><ul><li>事实上，当我们运行webpack时，webpack会查找当前目录下的 src/index.js作为入口；</li><li>所以，如果当前项目中没有存在 src/index.js 文件，那么会报错；</li></ul></li><li><p>当然，我们也可以通过配置来指定入口和出口</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>npx webpack --entry ./src/main.js --output-path ./build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="webpack-局部安装" tabindex="-1"><a class="header-anchor" href="#webpack-局部安装" aria-hidden="true">#</a> webpack 局部安装</h3><ol><li>版本控制：通过在项目中局部安装Webpack，可以确保每个项目使用的Webpack版本是一致的，避免不同项目之间的版本冲突。</li><li>简化部署：将Webpack安装在项目的本地目录中，可以简化项目的部署过程。只需要将整个项目目录复制到其他环境中，不需要再次安装全局的Webpack。</li><li>隔离环境：每个项目可以拥有自己独立的Webpack配置和插件，不会受到其他项目的影响。这样可以更灵活地根据项目需求进行定制和配置。</li><li>可移植性：通过局部安装Webpack，可以将整个项目打包成一个可移植的文件夹，方便在不同环境中进行迁移和共享。</li></ol><ul><li>第一步：创建package.json文件，用于管理项目的信息、库依赖等</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步：安装局部的webpack</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>npm install webpack webpack<span class="token operator">-</span>cli <span class="token operator">--</span>save<span class="token operator">-</span>dev
<span class="token comment">// -D(--save-dev) 开发依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三步：使用局部的webpack</li></ul><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第四步：在 package.json 中创建scripts脚本，执行脚本打包即可</li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code><span class="token comment"># package</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment"># cmd</span>
npm run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qiniu.waite.wang/202311052352789.png" alt="image-20231105235229201" tabindex="0" loading="lazy"><figcaption>image-20231105235229201</figcaption></figure><h2 id="webpack配置" tabindex="-1"><a class="header-anchor" href="#webpack配置" aria-hidden="true">#</a> Webpack配置</h2><h3 id="webpack-配置文件" tabindex="-1"><a class="header-anchor" href="#webpack-配置文件" aria-hidden="true">#</a> Webpack 配置文件</h3><ul><li>在通常情况下，webpack需要打包的项目是非常复杂的，并且我们需要一系列的配置来满足要求，默认配置必然 是不可以的。</li><li>我们可以在根目录下创建一个webpack.config.js文件，来作为webpack的配置文件：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./build&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>继续执行webpack命令，依然可以正常打包</li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="指定配置文件" tabindex="-1"><a class="header-anchor" href="#指定配置文件" aria-hidden="true">#</a> 指定配置文件</h3><ul><li><p>但是如果我们的配置文件并不是webpack.config.js的名字，而是其他的名字呢？</p><ul><li>比如我们将webpack.config.js修改成了 wk.config.js；</li><li>这个时候我们可以通过 --config 来指定对应的配置文件；</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>webpack --config wk.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>但是每次这样执行命令来对源码进行编译，会非常繁琐，所以我们可以在package.json中增加一个新的脚本：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;build&quot;: &quot;webpack --config wk.config.js&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>之后我们执行 npm run build来打包即可。</li></ul><h2 id="webpack的依赖" tabindex="-1"><a class="header-anchor" href="#webpack的依赖" aria-hidden="true">#</a> Webpack的依赖</h2><p>Webpack通过以下步骤对项目进行打包：</p><ol><li>配置：创建一个Webpack配置文件（通常命名为webpack.config.js），在其中定义打包的入口文件、输出文件的路径、加载器和插件等。</li><li>入口：在配置文件中指定打包的入口文件，可以是单个文件或多个文件, 从入口开始，会生成一个 依赖关系图，这个依赖关系图会包含应用程序中所需的所有模块（比如 js 文件、css 文件、图片、字体等), 然后遍历图结构，打包一个个模块（根据文件的不同使用不同的loader来解析）；</li><li>加载器：根据需要，配置加载器来处理不同类型的文件。例如，使用babel-loader来转换ES6+代码，使用 css-loader 和 style-loader 来处理CSS文件。</li><li>插件：根据需要，配置插件来执行额外的任务。例如，使用html-webpack-plugin生成HTML文件，使用mini-css-extract-plugin提取CSS文件。</li><li>输出：在配置文件中指定打包输出的路径和文件名。</li><li>运行：在命令行中运行webpack命令，Webpack将根据配置文件进行打包，并生成输出文件。</li></ol><p>在运行Webpack命令时，可以使用不同的参数和选项来控制打包的行为。例如，使用--mode参数指定打包的模式（开发模式或生产模式），使用--watch选项启用监听模式等。</p><figure><img src="https://qiniu.waite.wang/202311060009812.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="loader的使用" tabindex="-1"><a class="header-anchor" href="#loader的使用" aria-hidden="true">#</a> loader的使用</h2><blockquote><p>https://webpack.docschina.org/loaders/</p><p>在 Webpack5 以后会采用 asset module type 来替代 loader</p></blockquote><blockquote><p>在Webpack中，Loader是用于对不同类型的文件进行转换和处理的模块。它们作为Webpack的一部分，用于在打包过程中对文件进行预处理。</p><p>Loader可以将不同类型的文件（如JavaScript、CSS、图片等）转换为模块，以便在应用程序中使用。它们可以执行各种任务，例如将ES6+代码转换为ES5语法、处理CSS文件中的样式、压缩和优化图像等。</p><p>Loader通常以链式调用的方式使用，可以根据需要配置多个Loader来处理文件。每个Loader都会对文件进行一次转换，并将转换后的结果传递给下一个Loader，直到最后一个Loader将最终的结果返回给Webpack进行打包。</p><p>Loader的配置是通过Webpack的配置文件（通常是webpack.config.js）中的module.rules字段来完成。在这个字段中，可以指定不同类型文件的匹配规则和对应的Loader。</p></blockquote><h3 id="css-loader-的使用" tabindex="-1"><a class="header-anchor" href="#css-loader-的使用" aria-hidden="true">#</a> css-loader 的使用</h3><ul><li>对于加载css文件来说，我们需要一个可以读取css文件的loader；</li><li>这个loader最常用的是css-loader；</li><li>css-loader的安装：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install css-loader -D
npm install css-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如何使用这个loader来加载css文件呢？有三种方式： <ul><li>内联方式；</li><li>CLI方式（webpack5中不再使用）；</li><li>配置方式；</li></ul></li></ul><ol><li><p>内联方式：内联方式使用较少，因为不方便管理；</p><ul><li>在引入的样式前加上使用的loader，并且使用 ! 分割；</li></ul></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>import <span class="token string">&quot;css-loader!../css/style.css&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置方式</li></ol><ul><li>配置方式表示的意思是在我们的webpack.config.js文件中写明配置信息： <ul><li>module.rules中允许我们配置多个loader（因为我们也会继续使用其他的loader，来完成其他文件的加载)</li><li>这种方式可以更好的表示loader的配置，也方便后期的维护，同时也让你对各个Loader有一个全局的概览</li></ul></li><li>module.rules的配置如下： <ul><li>rules属性对应的值是一个数组：[Rule]</li><li>数组中存放的是一个个的Rule，Rule是一个对象，对象中可以设置多个属性： <ul><li>test属性：用于对 resource（资源）进行匹配的，通常会设置成正则表达式；</li><li>use属性：对应的值时一个数组：[UseEntry] <ul><li>UseEntry是一个对象，可以通过对象的属性来设置一些其他属性 <ul><li>loader：必须有一个 loader属性，对应的值是一个字符串；</li><li>options：可选的属性，值是一个字符串或者对象，值会被传入到loader中；</li><li>query：目前已经使用options来替代；</li></ul></li><li>传递字符串（如：use: [ &#39;style-loader&#39; ]）是 loader 属性的简写方式（如：use: [ { loader: &#39;style-loader&#39;} ]）；</li></ul></li><li>loader属性： Rule.use: [ { loader } ] 的简写</li></ul></li></ul></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">module.exports =</span> <span class="token punctuation">{</span>
  <span class="token selector">// ...
  module:</span> <span class="token punctuation">{</span>
    <span class="token selector">rules: [</span>
      <span class="token punctuation">{</span>
        <span class="token property">test</span><span class="token punctuation">:</span> /\\.css$/<span class="token punctuation">,</span>
        <span class="token property">use</span><span class="token punctuation">:</span> [<span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span>]
      <span class="token punctuation">}</span>
    ]
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="style-loader" tabindex="-1"><a class="header-anchor" href="#style-loader" aria-hidden="true">#</a> style-loader</h3><ul><li><p>我们已经可以通过css-loader来加载css文件了</p><ul><li>但是你会发现这个css在我们的代码中并没有生效（页面没有效果）。</li></ul></li><li><p>因为css-loader只是负责将.css文件进行解析，并不会将解析之后的css插入到页面中；</p></li><li><p>如果我们希望再完成插入style的操作，那么我们还需要另外一个loader，就是style-loader；</p></li><li><p>安装style-loader：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install style-loader -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>那么我们应该如何使用style-loader： <ul><li>在配置文件中，添加style-loader；</li><li>注意：因为loader的执行顺序是从右向左（或者说从下到上，或者说从后到前的），所以我们需要将style-loader写到 css-loader 的前面；</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="less工具处理" tabindex="-1"><a class="header-anchor" href="#less工具处理" aria-hidden="true">#</a> Less工具处理</h3><ul><li>我们可以使用less工具来完成它的编译转换：</li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install less <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>执行如下命令：</li></ul><div class="language-cobol line-numbers-mode" data-ext="cobol"><pre class="language-cobol"><code>npm install <span class="token operator">less</span> -D npx lessc <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>css<span class="token operator">/</span><span class="token keyword">title</span><span class="token punctuation">.</span><span class="token operator">less</span> <span class="token keyword">title</span><span class="token punctuation">.</span>css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="less-loader处理" tabindex="-1"><a class="header-anchor" href="#less-loader处理" aria-hidden="true">#</a> less-loader处理</h4><ul><li><p>但是在项目中我们会编写大量的css，它们如何可以自动转换呢？</p><ul><li>这个时候我们就可以使用less-loader，来自动使用less工具转换less到css；</li></ul></li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install less<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    test<span class="token operator">:</span> /\\.less$/<span class="token punctuation">,</span>
    use<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;less-loader&quot;</span>
    <span class="token punctuation">]</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postcss-loader-认识" tabindex="-1"><a class="header-anchor" href="#postcss-loader-认识" aria-hidden="true">#</a> postcss-loader(认识)</h3><ul><li>什么是PostCSS呢？ <ul><li>PostCSS是一个通过JavaScript来转换样式的工具；</li><li>这个工具可以帮助我们进行一些CSS的转换和适配，比如自动添加浏览器前缀、css样式的重置； p但是实现这些功能，我们需要借助于PostCSS对应的插件；</li></ul></li><li>如何使用PostCSS呢？主要就是两个步骤： <ul><li>第一步：查找PostCSS在构建工具中的扩展，比如webpack中的postcss-loader；</li><li>第二步：选择可以添加你需要的PostCSS相关的插件；</li></ul></li></ul><h4 id="命令行使用postcss" tabindex="-1"><a class="header-anchor" href="#命令行使用postcss" aria-hidden="true">#</a> 命令行使用postcss</h4><ul><li>安装一下它们：postcss、postcss-cli</li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install postcss postcss<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,68),w={href:"https://autoprefixer.github.io/",target:"_blank",rel:"noopener noreferrer"},q=s("li",null,"我们可以在上面的网站中查询一些添加css属性的样式；",-1),S=s("li",null,"在Webpack中，PostCSS通常用于对CSS文件进行预处理和后处理。您可以使用PostCSS来编写现代CSS语法，然后使用各种插件对其进行处理，例如自动添加CSS前缀、压缩CSS等。",-1),j=l(`<h4 id="插件autoprefixer" tabindex="-1"><a class="header-anchor" href="#插件autoprefixer" aria-hidden="true">#</a> 插件autoprefixer</h4><ul><li>因为我们需要添加前缀，所以要安装autoprefixer：</li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install autoprefixer <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>直接使用使用postcss工具，并且制定使用autoprefixer</li></ul><div class="language-cobol line-numbers-mode" data-ext="cobol"><pre class="language-cobol"><code>npx postcss --use autoprefixer -o <span class="token keyword">end</span><span class="token punctuation">.</span>css <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>css<span class="token operator">/</span>style<span class="token punctuation">.</span>css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>转化的结果如下</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
     <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
      <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
          <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUJBQWlCO0tBQWpCLHNCQUFpQjtNQUFqQixxQkFBaUI7VUFBakIsaUJBQWlCO0FBQ25CIiwiZmlsZSI6ImRlbW8uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRpdGxlIHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59Il19 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="postcss-loader" tabindex="-1"><a class="header-anchor" href="#postcss-loader" aria-hidden="true">#</a> postcss-loader</h4><ul><li><p>真实开发中我们必然不会直接使用命令行工具来对css进行处理，而是可以借助于构建工具：</p><ul><li>在webpack中使用postcss就是使用postcss-loader来处理的；</li></ul></li><li><p>我们来安装postcss-loader：</p></li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install postcss<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>因为postcss需要有对应的插件才会起效果，所以我们需要配置它的plugin；</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">use: [</span>
	<span class="token punctuation">{</span>
		<span class="token selector">loading: &quot;postcss-loader&quot;,
		options:</span> <span class="token punctuation">{</span>
			<span class="token selector">postcssOptions:</span> <span class="token punctuation">{</span>
				<span class="token property">plugins</span><span class="token punctuation">:</span> [
					<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;autoprefixer&#39;</span><span class="token punctuation">)</span>
				] 
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以将 postcss 配置分离, 根目录下新建 postcss.config.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样在 webpack.config 中只需要 添加 <code>postcss-loader</code> 即可</li></ul><h4 id="postcss-preset-env" tabindex="-1"><a class="header-anchor" href="#postcss-preset-env" aria-hidden="true">#</a> postcss-preset-env</h4><blockquote><p><code>postcss-preset-env</code> 是一个 PostCSS 插件，它允许您使用最新的 CSS 特性，同时它会根据您的目标环境自动添加必要的回退。</p><p>这个插件包含了 autoprefixer（自动添加浏览器前缀），cssnano（压缩 CSS），以及一些其他的 PostCSS 插件。这意味着您可以在 CSS 中使用最新的特性，例如 CSS Grid，CSS Variables，等等，而不需要担心兼容性问题。</p><p>在您的 <code>postcss.config.js</code> 文件中，您已经将 <code>postcss-preset-env</code> 添加为一个插件，这意味着当您运行 PostCSS 时，它将使用 <code>postcss-preset-env</code> 来处理您的 CSS 文件。</p></blockquote><ul><li><p>事实上，在配置postcss-loader时，我们配置插件并不需要使用autoprefixer。</p></li><li><p>我们可以使用另外一个插件：postcss-preset-env</p><ul><li>postcss-preset-env也是一个postcss的插件；</li><li>它可以帮助我们将一些现代的CSS特性，转成大多数浏览器认识的CSS，并且会根据目标浏览器或者运行时环境 添加所需的polyfill；</li><li>也包括会自动帮助我们添加 autoprefixer（所以相当于已经内置了 autoprefixer）；</li></ul></li><li><p>首先，我们需要安装 postcss-preset-env：</p></li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install postcss<span class="token operator">-</span>preset<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>之后，我们直接修改掉之前的 autoprefixer 即可;</li></ul><h3 id="file-loader" tabindex="-1"><a class="header-anchor" href="#file-loader" aria-hidden="true">#</a> file-loader</h3><ul><li><p>要处理jpg、png等格式的图片，我们也需要有对应的loader：file-loader</p><ul><li>file-loader的作用就是帮助我们处理import/require()方式引入的一个文件资源，并且会将它放到我们输出的文件夹中；</li><li>当然我们待会儿可以学习如何修改它的名字和所在文件夹；</li></ul></li><li><p>安装file-loader：</p></li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install file<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置处理图片的Rule：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  test<span class="token operator">:</span> /\\.(jpe?g|png|gif|svg)$/<span class="token punctuation">,</span>
  type<span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
  generator<span class="token operator">:</span> <span class="token punctuation">{</span>
    filename<span class="token operator">:</span> <span class="token string">&quot;img/[name]_[hash:6][ext]&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  parser<span class="token operator">:</span> <span class="token punctuation">{</span>
    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>
      maxSize<span class="token operator">:</span> <span class="token number">100</span> * <span class="token number">1024</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url-loader" tabindex="-1"><a class="header-anchor" href="#url-loader" aria-hidden="true">#</a> url-loader</h3><ul><li><p>url-loader和file-loader的工作方式是相似的，但是可以将较小的文件，转成base64的URI。</p></li><li><p>安装url-loader：</p></li></ul><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>url<span class="token operator">-</span>loader npm install url<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>显示结果是一样的，并且图片可以正常显示；</li></ul><figure><img src="https://qiniu.waite.wang/202311112113242.png" alt="image-20231111211324041" tabindex="0" loading="lazy"><figcaption>image-20231111211324041</figcaption></figure><ul><li>但是在dist文件夹中，我们会看不到图片文件： <ul><li>这是因为我的两张图片的大小分别是38kb和295kb；</li><li>默认情况下url-loader会将所有的图片文件转成base64编码</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpe?g|png|gif|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;url-loader&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// outputPath: &quot;img&quot;,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;img/[name]_[hash:6].[ext]&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="url-loader的limit" tabindex="-1"><a class="header-anchor" href="#url-loader的limit" aria-hidden="true">#</a> url-loader的limit</h4><ul><li>但是开发中我们往往是小的图片需要转换，但是大的图片直接使用图片即可 <ul><li>这是因为小的图片转换base64之后可以和页面一起被请求，减少不必要的请求过程；</li><li>而大的图片也进行转换，反而会影响页面的请求速度；</li></ul></li><li>那么，我们如何可以限制哪些大小的图片转换和不转换呢？ <ul><li>url-loader有一个options属性limit，可以用于设置转换的限制；</li><li>下面的代码38kb的图片会进行base64编码，而295kb的不会；</li></ul></li></ul><h3 id="字体文件加载" tabindex="-1"><a class="header-anchor" href="#字体文件加载" aria-hidden="true">#</a> 字体文件加载</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(eot|ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;file-loader&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// outputPath: &quot;font&quot;,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;font/[name]_[hash:6].[ext]&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(eot|ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;font/[name]_[hash:6][ext]&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件命名规则" tabindex="-1"><a class="header-anchor" href="#文件命名规则" aria-hidden="true">#</a> 文件命名规则</h2><ul><li>有时候我们处理后的文件名称按照一定的规则进行显示： <ul><li>比如保留原来的文件名、扩展名，同时为了防止重复，包含一个hash值等；</li></ul></li><li>这个时候我们可以使用PlaceHolders来完成，webpack给我们提供了大量的PlaceHolders来显示不同的内容： <ul><li>https://webpack.js.org/loaders/file-loader/#placeholders</li></ul></li><li>我们这里介绍几个最常用的placeholder： <ul><li>[ext]： 处理文件的扩展名；</li><li>[name]：处理文件的名称；</li><li>[hash]：文件的内容，使用MD4的散列函数处理，生成的一个128位的hash值（32个十六进制）；</li><li>[contentHash]：在file-loader中和[hash]结果是一致的（在webpack的一些其他地方不一样，后面会讲到）；</li><li>[<code>hash:&lt;length&gt;</code>]：截图hash的长度，默认32个字符太长了；</li><li>[path]：文件相对于webpack配置文件的路径；</li></ul></li></ul><h3 id="设置文件名称" tabindex="-1"><a class="header-anchor" href="#设置文件名称" aria-hidden="true">#</a> 设置文件名称</h3><ul><li>那么我们可以按照如下的格式编写：</li><li>这个也是vue的写法；</li></ul><figure><img src="https://qiniu.waite.wang/202311061505056.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="设置文件的存放路径" tabindex="-1"><a class="header-anchor" href="#设置文件的存放路径" aria-hidden="true">#</a> 设置文件的存放路径</h3><ul><li>刚才通过 img/ 已经设置了文件夹，这个也是vue、react脚手架中常见的设置方式 <ul><li>其实按照这种设置方式就可以了；</li><li>当然我们也可以通过outputPath来设置输出的文件夹；</li></ul></li></ul><figure><img src="https://qiniu.waite.wang/202311061506379.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="asset-module-type" tabindex="-1"><a class="header-anchor" href="#asset-module-type" aria-hidden="true">#</a> asset module type</h2><ul><li>我们当前使用的webpack版本是webpack5： <ul><li>在webpack5之前，加载这些资源我们需要使用一些loader，比如raw-loader 、url-loader、file-loader；</li><li>在webpack5开始，我们可以直接使用资源模块类型（asset module type），来替代上面的这些loader；</li></ul></li><li>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader： <ul><li>asset/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现；</li><li>asset/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现；</li><li>asset/source 导出资源的源代码。之前通过使用 raw-loader 实现；</li><li>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现；</li></ul></li></ul><h3 id="asset-module-type的使用" tabindex="-1"><a class="header-anchor" href="#asset-module-type的使用" aria-hidden="true">#</a> asset module type的使用</h3><ul><li>比如加载图片，我们可以使用下面的方式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpe?g|png|gif|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 自定义文件的输出路径和文件名</span>
  <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;img/[name]_[hash:6][ext]&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> Plugin</h2><ul><li>Loader是用于特定的模块类型进行转换；</li><li>Plugin可以用于执行更加广泛的任务，比如打包优化、资源管理、环境变量注入等；</li></ul><figure><img src="https://qiniu.waite.wang/202311121514761.png" alt="image-20231112151429444" tabindex="0" loading="lazy"><figcaption>image-20231112151429444</figcaption></figure><h3 id="cleanwebpackplugin" tabindex="-1"><a class="header-anchor" href="#cleanwebpackplugin" aria-hidden="true">#</a> CleanWebpackPlugin</h3><ul><li>每次修改了一些配置，重新打包时，都需要手动删除dist文件夹：</li><li>我们可以借助于一个插件来帮助我们完成，这个插件就是CleanWebpackPlugin；</li><li>首先，我们先安装这个插件：</li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code> npm install clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>之后在插件中配置：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="htmlwebpackplugin" tabindex="-1"><a class="header-anchor" href="#htmlwebpackplugin" aria-hidden="true">#</a> HtmlWebpackPlugin</h3><ul><li><p>我们的HTML文件是编写在根目录下的，而最终打包的dist文件夹中是没有index.html文件的。</p></li><li><p>在进行项目部署的时，必然也是需要有对应的入口文件index.html；</p></li><li><p>所以我们也需要对index.html进行打包处理；</p></li><li><p>对HTML进行打包处理我们可以使用另外一个插件：HtmlWebpackPlugin；</p></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="自定义html模板" tabindex="-1"><a class="header-anchor" href="#自定义html模板" aria-hidden="true">#</a> 自定义HTML模板</h4><ul><li><p>如果我们想在自己的模块中加入一些比较特别的内容：</p><ul><li>比如添加一个noscript标签，在用户的JavaScript被关闭时，给予响应的提示；</li><li>比如在开发vue或者react项目时，我们需要一个可以挂载后续组件的根标签</li></ul></li><li><p>这个我们需要一个属于自己的index.html模块：</p></li></ul><blockquote><p>public/index.html</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= BASE_URL %&gt;favicon.ico<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>We&#39;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- built files will be auto injected --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面的代码中，会有一些类似这样的语法&lt;% 变量 %&gt;，这个是EJS模块填充数据的方式。 <ul><li>在配置 HtmlWebpackPlugin 时，我们可以添加如下配置： <ul><li>template：指定我们要使用的模块所在的路径；</li><li>title：在进行 htmlWebpackPlugin.options.title 读取时，就会读到该信息；</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;哈哈哈哈&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defineplugin" tabindex="-1"><a class="header-anchor" href="#defineplugin" aria-hidden="true">#</a> DefinePlugin</h3><blockquote><p>https://github.com/jantimon/html-webpack-plugin</p></blockquote><ul><li>因为在模板中使用了 <code>BASE_URL</code>, 但是我们并没有设置过这个常量值，所以会出现没有定义的错误 - <code>BASE_URL is not defined</code></li><li>这个时候我们可以使用DefinePlugin插件</li><li>DefinePlugin允许在编译时创建配置的全局常量，是一个webpack内置的插件（不需要单独安装）：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> DefinePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">&quot;&#39;./&#39;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="copywebpackplugin" tabindex="-1"><a class="header-anchor" href="#copywebpackplugin" aria-hidden="true">#</a> CopyWebpackPlugin</h3><ul><li><p><code>CopyWebpackPlugin</code> 是一个用于 webpack 的插件，它的主要功能是将单个文件或整个目录复制到构建目录。</p><p>这个插件在以下情况下非常有用：</p><ol><li>当你有一些静态资源（例如图片、字体或公共库）需要包含在你的构建中，但是这些资源并不需要通过 webpack 处理时。</li><li>当你需要将一些文件复制到构建目录，以便在部署应用程序时使用</li></ol></li><li><p>安装CopyWebpackPlugin插件：</p></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install copy<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>接下来配置CopyWebpackPlugin即可： <ul><li>复制的规则在patterns中设置；</li><li>from：设置从哪一个源中开始复制；</li><li>to：复制到的位置，可以省略，会默认复制到打包的目录下；</li><li>globOptions：设置一些额外的选项，其中可以编写需要忽略的文件： <ul><li>.DS_Store：mac目录下回自动生成的一个文件；</li><li>index.html：也不需要复制，因为我们已经通过HtmlWebpackPlugin完成了index.html的生成；</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;copy-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">globOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;**/index.html&quot;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mode配置列表" tabindex="-1"><a class="header-anchor" href="#mode配置列表" aria-hidden="true">#</a> Mode配置列表</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置模式</span>
  <span class="token comment">// development 开发阶段, 会设置development</span>
  <span class="token comment">// production 准备打包上线的时候, 设置production</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置source-map, 建立js映射文件, 方便调试代码和错误</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77);function _(C,W){const n=p("ExternalLinkIcon");return i(),o("div",null,[r,s("blockquote",null,[s("p",null,[a("本质上，"),u,a(" 是一个用于现代 JavaScript 应用程序的 "),d,a("。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 "),s("a",k,[a("依赖图(dependency graph)"),e(n)]),a("，然后将你项目中所需的每一个模块组合成一个或多个 "),v,a("，它们均为静态资源，用于展示你的内容。")]),b]),m,s("ul",null,[s("li",null,[a("webpack的官方文档是"),s("a",g,[a("webpack"),e(n)]),s("ul",null,[s("li",null,[a("webpack的中文官方文档是"),s("a",h,[a("webpack"),e(n)])])])]),s("li",null,[a("Webpack的运行是依赖Node环境的，所以我们电脑上必须有Node环境 "),s("ul",null,[f,s("li",null,[a("Node官方网站："),s("a",x,[a("Node.js"),e(n)])])])])]),y,s("ul",null,[s("li",null,[a("我们编写一个需要添加前缀的css： "),s("ul",null,[s("li",null,[s("a",w,[a("Autoprefixer CSS online"),e(n)])]),q,S])])]),j])}const I=t(c,[["render",_],["__file","Webpack.html.vue"]]);export{I as default};
