import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as e}from"./app-4b6e5fb1.js";const p={},t=e(`<h2 id="什么是-babel" tabindex="-1"><a class="header-anchor" href="#什么是-babel" aria-hidden="true">#</a> 什么是 Babel?</h2><blockquote><p>https://babeljs.io/</p></blockquote><blockquote><ul><li>Babel 是一个 JavaScript 编译器，可以将 ECMAScript 2015+ 代码转换为向后兼容的 JavaScript 版本，以便在当前和旧版浏览器或环境中运行。它还支持将 JSX 转换为普通 JavaScript 代码。Babel 是一个非常流行的工具，许多现代的 JavaScript 应用程序都使用它来构建和部署。</li><li>事实上，在开发中我们很少直接去接触babel，但是babel对于前端开发来说，目前是不可缺少的一部分：</li><li>开发中，我们想要使用ES6+的语法，想要使用TypeScript，开发React项目，它们都是离不开Babel的；所以，学习Babel对于我们理解代码从编写到线上的转变过程至关重要；</li></ul></blockquote><ul><li>以下是一个使用 Babel 的示例：</li><li>假设我们有一个使用箭头函数和 const 声明的简单 JavaScript 模块：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> greet<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果我们想要在旧版浏览器中运行它，我们可以使用 Babel 将其转换为 ES5：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">&quot;__esModule&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> _default <span class="token operator">=</span> greet<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>default <span class="token operator">=</span> _default<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个转换过的代码可以在大多数浏览器中运行，即使它们不支持箭头函数或 const 声明。</li></ul><h2 id="babel-命令行使用" tabindex="-1"><a class="header-anchor" href="#babel-命令行使用" aria-hidden="true">#</a> Babel 命令行使用</h2><ul><li>babel本身可以作为一个独立的工具（和postcss一样），不和webpack等构建工具配置来单独使用。</li><li>如果我们希望在命令行尝试使用babel，需要安装如下库： <ul><li>@babel/core：babel的核心代码，必须安装；</li><li>@babel/cli：可以让我们在命令行使用babel；</li></ul></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install <span class="token variable">@babel</span><span class="token operator">/</span>cli <span class="token variable">@babel</span><span class="token operator">/</span>core <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用babel来处理我们的源代码： <ul><li>src：是源文件的目录；</li><li>–out-dir：指定要输出的文件夹dist；</li><li>--out-file: 指定要输出的文件dist；</li></ul></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npx babel src <span class="token operator">-</span><span class="token operator">-</span>out<span class="token operator">-</span>dir dist
npx babel src <span class="token operator">-</span><span class="token operator">-</span>out<span class="token operator">-</span>file dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><ul><li><p>Babel 的插件是用于转换 JavaScript 代码的小型程序，可以添加到 Babel 配置中。Babel 插件可以执行各种任务，例如：</p><ul><li>转换语法：将新的 ECMAScript 特性转换为向后兼容的代码。</li><li>转换 API：将使用新 API 的代码转换为旧 API。</li><li>转换 JSX：将 JSX 转换为普通的 JavaScript 代码。</li></ul></li><li><p>以下是一些常见的 Babel 插件：</p><ul><li>@babel/plugin-transform-arrow-functions: 将箭头函数转换为普通函数。</li><li>@babel/plugin-transform-block-scoping: 将 let 和 const 声明转换为 var 声明。</li><li>@babel/plugin-transform-classes: 将类转换为 ES5 构造函数。</li><li>@babel/plugin-transform-destructuring: 将解构赋值转换为普通赋值。</li><li>@babel/plugin-transform-object-assign: 将 Object.assign() 转换为 ES5 兼容的代码。</li><li>@babel/plugin-transform-react-jsx: 将 JSX 转换为普通的 JavaScript 代码。</li><li>@babel/plugin-transform-runtime: 避免在每个文件中重复使用 Babel 运行时代码。</li></ul></li><li><p>如何使用?</p><ul><li>比如我们需要转换箭头函数, const 转成 var，那么我们就可以使用箭头函数转换相关的插件：</li></ul></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>arrow<span class="token operator">-</span>functions <span class="token operator">-</span>D 
npm install <span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>block<span class="token operator">-</span>scoping <span class="token operator">-</span>D

npx babel src <span class="token operator">-</span><span class="token operator">-</span>out<span class="token operator">-</span>dir dist <span class="token operator">-</span><span class="token operator">-</span>plugins=<span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>block<span class="token operator">-</span>scoping <span class="token punctuation">,</span><span class="token variable">@babel</span><span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>arrow<span class="token operator">-</span>functions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预设-preset" tabindex="-1"><a class="header-anchor" href="#预设-preset" aria-hidden="true">#</a> 预设 preset</h2><p>Babel 的预设（preset）是一组预先配置的转换规则，用于将特定版本的 JavaScript 代码转换为向后兼容的旧版本。以下是一些常用的 Babel 预设：</p><ol><li>@babel/preset-env: 根据目标环境自动确定需要的转换规则。它根据你在 .babelrc 或 babel.config.js 文件中的配置来确定需要转换的 JavaScript 特性。</li><li>@babel/preset-react: 用于转换 React JSX 语法的预设。它可以将 JSX 转换为普通的 JavaScript 代码。</li><li>@babel/preset-typescript: 用于转换 TypeScript 代码的预设。它可以将 TypeScript 的类型注解和其他特定语法转换为普通的 JavaScript 代码。</li><li>@babel/preset-flow: 用于转换 Flow 类型注解的预设。它可以将 Flow 的类型注解转换为普通的 JavaScript 代码。</li></ol><p>这些预设可以根据你的项目需求进行选择和配置。你可以在 .babelrc 或 babel.config.js 文件中指定所需的预设，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install <span class="token variable">@babel</span><span class="token operator">/</span>preset<span class="token operator">-</span>env <span class="token operator">-</span>D 
npx babel src <span class="token operator">-</span><span class="token operator">-</span>out<span class="token operator">-</span>dir dist <span class="token operator">-</span><span class="token operator">-</span>presets=<span class="token variable">@babel</span><span class="token operator">/</span>preset<span class="token operator">-</span>env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h3><ul><li><p>babel是如何做到将我们的一段代码（ES6、TypeScript、React）转成另外一段代码（ES5）的呢？</p><ul><li>从一种源代码（原生语言）转换成另一种源代码（目标语言），这是什么的工作呢？</li><li>就是编译器，事实上我们可以将babel看成就是一个编译器。</li><li>Babel编译器的作用就是将我们的源代码，转换成浏览器可以直接识别的另外一段源代码；</li></ul></li><li><p>Babel也拥有编译器的工作流程：</p><ul><li>解析（Parsing）：Babel首先将输入的JavaScript代码解析成抽象语法树（Abstract Syntax Tree，AST）。AST是一个用于表示代码结构的树状数据结构，它能够准确地描述代码的语法和语义。</li><li>转换（Transformation）：在AST的基础上，Babel会应用一系列的插件和预设来进行代码转换。这些插件和预设可以执行各种转换操作，例如语法转换、代码优化、添加兼容性处理等。每个插件都负责处理AST中的特定节点，并根据需要进行修改或替换。</li><li>生成（Generation）：转换完成后，Babel会将修改后的AST重新生成为JavaScript代码。这些生成的代码可以是与输入代码相同的版本，也可以是经过转换后的新代码。</li></ul></li><li><p>https://github.com/jamiebuilds/the-super-tiny-compiler: 非常简单的编译器实现，旨在教授编译器原理和实践。</p></li></ul><h3 id="执行原理" tabindex="-1"><a class="header-anchor" href="#执行原理" aria-hidden="true">#</a> 执行原理</h3><blockquote><p>Babel的执行阶段</p></blockquote><figure><img src="https://qiniu.waite.wang/202311162053777.png" alt="image-20231116205304599" tabindex="0" loading="lazy"><figcaption>image-20231116205304599</figcaption></figure><figure><img src="https://qiniu.waite.wang/202311162053832.png" alt="image-20231116205317664" tabindex="0" loading="lazy"><figcaption>image-20231116205317664</figcaption></figure><ol><li>词法分析（Lexing）：将输入的源代码字符串转换为一个令牌（Token）序列。每个令牌代表源代码中的一个语法单元，例如标识符、运算符、括号等。</li><li>语法分析（Parsing）：将令牌序列转换为抽象语法树（AST）。AST是一个用于描述代码结构的树状数据结构，它能够准确地描述源代码的语法和语义。</li><li>转换（Transformation）：在AST的基础上，应用一系列的转换规则，以修改和优化AST。这些规则可以执行各种操作，例如语法转换、代码优化、添加兼容性处理等。</li><li>代码生成（Code Generation）：将修改后的AST转换为目标语言的代码。在&quot;The Super Tiny Compiler&quot;中，目标语言是JavaScript。</li><li>输出：输出生成的目标代码。</li></ol><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2><ul><li>babel-loader是一个用于在Webpack构建过程中将JavaScript代码转换的加载器（loader）。它是与Babel配合使用的常用工具之一。</li><li>通过配置Webpack的规则，使用babel-loader可以将指定的JavaScript文件传递给Babel进行转换。Babel会根据配置的插件和预设，将源代码转换为目标浏览器或环境所支持的语法。</li><li>指定使用的插件</li></ul><figure><img src="https://qiniu.waite.wang/202311162205301.png" alt="image-20231116220536704" tabindex="0" loading="lazy"><figcaption>image-20231116220536704</figcaption></figure><ul><li><p>presets 预设: 如果我们一个个去安装使用插件，那么需要手动来管理大量的babel插件，我们可以直接给webpack提供一个 preset，webpack会根据我们的预设来加载对应的插件列表，并且将其传递给babel。以下使用 <code>@babel/preset-env</code></p><ul><li>env</li><li>react</li><li>TypeScript</li></ul></li><li><p>使用 babel-loader 的一般步骤如下：</p><ol><li>安装 babel-loader 和相关的Babel插件和预设：</li></ol><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install <span class="token operator">-</span><span class="token operator">-</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>loader <span class="token variable">@babel</span><span class="token operator">/</span>core <span class="token variable">@babel</span><span class="token operator">/</span>preset<span class="token operator">-</span>env webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>webpack.config.js，在其中配置 babel-loader：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><ul><li>我们可以将babel的配置信息放到一个独立的文件中，babel给我们提供了两种配置文件的编写： <ul><li>babel.config.json（或者.js，.cjs，.mjs）文件；</li><li>babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件；</li></ul></li><li>它们两个有什么区别呢？目前很多的项目都采用了多包管理的方式（babel本身、element-plus、umi等）； <ul><li>.babelrc.json：早期使用较多的配置方式，但是对于配置Monorepos项目是比较麻烦的；</li><li>babel.config.json（babel7）：可以直接作用于Monorepos项目的子包，更加推荐；</li><li>补充: <em>Monorepo</em> 是一种项目代码管理方式,指单个仓库中管理多个项目,有助于简化代码共享、版本控制、构建和部署等方面的复杂性,并提供更好的可重用性和协作性, 类似 <code>@babel/preset-env</code> 这种写法大概率就是 Monorepo</li></ul></li><li>以下为 <code>babel.config.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样在 <code>webpack.config.js</code> 中只需要</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-webpack-中使用-vue" tabindex="-1"><a class="header-anchor" href="#在-webpack-中使用-vue" aria-hidden="true">#</a> 在 Webpack 中使用 Vue</h2><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;h2&gt;{{title}} - {{message}}&lt;/h2&gt;&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;哈哈哈&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此时重新 <code>build</code> 运行后不显示, 报错如下</p><p><code>runtime-core.esm-bundler.js:38 [Vue warn]: Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias &quot;vue&quot; to &quot;vue/dist/vue.esm-bundler.js&quot; at &lt;App&gt;</code> -&gt; <code>runtime-core.esm-bundler.js:38</code></p></blockquote><blockquote><p>这个错误是因为 Vue 3 默认不包含模板编译器，所以当你试图在组件中使用 <code>template</code> 选项时，你会看到这个警告。</p><p>要解决这个问题，你需要在 webpack 配置中添加一个别名，将 &quot;vue&quot; 指向 &quot;vue/dist/vue.esm-bundler.js&quot;。这个版本的 Vue 包含了模板编译器。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 main.js 中更改应用, 重新部署即可</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue/dist/vue.esm-bundler.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Vue打包后不同版本解析</p><ul><li>vue(.runtime).global(.prod).js 是用于直接在浏览器中引入的全局版本，可以通过 <code>&lt;script&gt;</code> 标签来使用。 + 我们之前通过CDN引入和下载的Vue版本就是这个版本； + 会暴露一个全局的Vue来使用；</li><li>vue(.runtime).esm-browser(.prod).js 是用于原生 ES 模块导入的版本，在支持 ES 模块的浏览器中可以使用 <code>&lt;script type=&#39;module&#39;&gt;</code> 来引入。</li><li>vue(.runtime).esm-bundler.js 是用于构建工具（如webpack、rollup、parcel等）的版本，默认情况下会使用 vue.runtime.esm-bundler.js。如果需要解析模板（template），则需要手动指定 vue.esm-bundler.js。</li><li>vue.cjs(.prod).js 是用于服务器端渲染的版本，在 Node.js 中可以使用 require() 来引入。 <ul><li><code>require</code> 是 Node.js 中用于导入模块的函数。它是 CommonJS 模块系统的一部分，这是 Node.js 的默认模块系统。以下是一个 <code>require</code> 的基本用法示例：<code>const fs = require(&#39;fs&#39;);</code>在这个例子中，我们导入了 Node.js 的内置 <code>fs</code>（文件系统）模块。</li><li><code>require</code> 函数也可以用来导入你自己的模块。例如，如果你有一个名为 <code>myModule.js</code> 的文件，你可以这样导入它：<code>const myModule = require(&#39;./myModule.js&#39;);</code> 注意，当导入自己的模块时，你需要提供模块的相对路径（以 <code>./</code> 开头）。</li><li>然而，<code>require</code> 并不是 ECMAScript（JavaScript 的标准化规范）的一部分，因此它在浏览器环境中通常不可用。在浏览器环境中，你通常会使用 ECMAScript 的 <code>import</code> 和 <code>export</code> 语句来导入和导出模块。</li></ul></li></ul></blockquote><ul><li>接下来我们把 main.js 中的 vue 代码抽离为单文件组件(SFC)</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- /vue/App.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>我是Vue渲染出来的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;./HelloWorld.vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      HelloWorld
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;哈哈哈&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">h2</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重新打包, 报错：我们需要合适的Loader来处理文件。</li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install vue<span class="token operator">-</span>loader <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置 <code>webpack.config.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;vue-loader&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>重新 build 仍然报错 <code>Error:vue-loader requires @vue/compiler present the dependency tree</code>, 打包依然会报错，这是因为我们必须添加@vue/compiler-sfc来对template进行解析：</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install <span class="token variable">@vue</span><span class="token operator">/</span>compiler<span class="token operator">-</span>sfc <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重新打包即可支持App.vue的写法</p></li></ul><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><ul><li><p>当然此时控制台还有如下报错 <code>You are running the csm-bundler bu1ld of Vue, It is recommended to contigure your bundler to expl1citly roplace featur flag globals with boolean literals to get proper tree-shaking in the fina bundle, See http://link,yuejs.org/feature-flags for more details.</code></p></li><li><p>在官方解释如下: https://github.com/vuejs/core/tree/main/packages/vue#bundler-build-feature-flags</p></li></ul><figure><img src="https://qiniu.waite.wang/202311172346161.png" alt="image-20231117234618957" tabindex="0" loading="lazy"><figcaption>image-20231117234618957</figcaption></figure><ul><li>Bundler Build Feature Flags是构建工具（Bundler）中的一种特性标志，用于控制Vue框架的不同特性的开启和关闭。从Vue 3.0.0-rc.3版本开始，esm-bundler构建工具现在公开了全局特性标志，可以在编译时进行覆盖。其中两个重要的特性标志包括： <ul><li>VUE_OPTIONS_API：启用/禁用Options API支持，默认为true。</li><li>VUE_PROD_DEVTOOLS：启用/禁用生产环境下的devtools支持，默认为false。</li></ul></li><li>在没有配置这些特性标志的情况下，构建工具仍然可以正常工作，但强烈建议正确配置它们以便在最终的打包文件中实现正确的树摇效果。要配置这些特性标志： <ul><li>https://webpack.js.org/plugins/define-plugin/</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">&quot;&#39;./&#39;&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">_<wbr>_VUE_OPTIONS_API__</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">_<wbr>_VUE_PROD_DEVTOOLS__</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>开启Bundler Build Feature Flags的好处在于能够更好地控制Vue框架的特性和功能，从而有效地减少最终打包文件的大小。通过正确配置特性标志，可以实现树摇（tree-shaking）效果，即只包含应用程序实际使用的代码，而不包含未使用的代码。这将有助于提高应用程序的性能和加载速度，并减少资源消耗。此外，通过禁用不需要的特性，还可以减少应用程序的复杂性，并提高代码的可维护性。因此，建议开发人员在使用Vue框架时正确配置Bundler Build Feature Flags，以获得更好的开发和部署体验。</p></blockquote>`,60),l=[t];function o(i,c){return n(),a("div",null,l)}const d=s(p,[["render",o],["__file","babel.html.vue"]]);export{d as default};
