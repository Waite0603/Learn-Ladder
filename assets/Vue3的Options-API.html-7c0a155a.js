const e=JSON.parse('{"key":"v-735040ba","path":"/web/vue/learn/essential/Vue3%E7%9A%84Options-API.html","title":"Vue 的Options API","lang":"zh-CN","frontmatter":{"title":"Vue 的Options API","icon":"post","order":3,"date":"2023-09-07T00:00:00.000Z","description":"Computed 认识计算属性 我们知道，在模板中可以直接通过插值语法显示一些data中的数据。 但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示； 比如我们需要对多个data数据进行运算、三元运算符来决定结果、数据进行某种转化后显示； 在模板中使用表达式，可以非常方便的实现，但是设计它们的初衷是用于简单的运算； 在模板中放入太多的逻辑会让模板过重和难以维护； 并且如果多个地方都使用到，那么会有大量重复的代码；","head":[["meta",{"property":"og:url","content":"https://brain.sunguoqi.com/web/vue/learn/essential/Vue3%E7%9A%84Options-API.html"}],["meta",{"property":"og:site_name","content":"Waite Wang"}],["meta",{"property":"og:title","content":"Vue 的Options API"}],["meta",{"property":"og:description","content":"Computed 认识计算属性 我们知道，在模板中可以直接通过插值语法显示一些data中的数据。 但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示； 比如我们需要对多个data数据进行运算、三元运算符来决定结果、数据进行某种转化后显示； 在模板中使用表达式，可以非常方便的实现，但是设计它们的初衷是用于简单的运算； 在模板中放入太多的逻辑会让模板过重和难以维护； 并且如果多个地方都使用到，那么会有大量重复的代码；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-30T11:56:24.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-30T11:56:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue 的Options API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-30T11:56:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Computed","slug":"computed","link":"#computed","children":[{"level":3,"title":"认识计算属性","slug":"认识计算属性","link":"#认识计算属性","children":[]},{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"计算属性 vs methods","slug":"计算属性-vs-methods","link":"#计算属性-vs-methods","children":[]},{"level":3,"title":"计算属性的 setter 和 getter","slug":"计算属性的-setter-和-getter","link":"#计算属性的-setter-和-getter","children":[]}]},{"level":2,"title":"侦听器 watch","slug":"侦听器-watch","link":"#侦听器-watch","children":[{"level":3,"title":"简单案例","slug":"简单案例","link":"#简单案例","children":[]},{"level":3,"title":"配置选项","slug":"配置选项","link":"#配置选项","children":[]},{"level":3,"title":"其他方式","slug":"其他方式","link":"#其他方式","children":[]}]},{"level":2,"title":"阶段案例","slug":"阶段案例","link":"#阶段案例","children":[]},{"level":2,"title":"v-model","slug":"v-model","link":"#v-model","children":[]}],"git":{"createdTime":1698641921000,"updatedTime":1698666984000,"contributors":[{"name":"waite0603","email":"waite@waite.wang","commits":2}]},"readingTime":{"minutes":10.64,"words":3193},"filePathRelative":"web/vue/learn/essential/Vue3的Options-API.md","localizedDate":"2023年9月7日","excerpt":"<h2> Computed</h2>\\n<h3> 认识计算属性</h3>\\n<p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据。</p>\\n<p>但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示；</p>\\n<ul>\\n<li>比如我们需要对多个data数据进行运算、三元运算符来决定结果、数据进行某种转化后显示；</li>\\n<li>在模板中使用表达式，可以非常方便的实现，但是设计它们的初衷是用于简单的运算；</li>\\n<li>在模板中放入太多的逻辑会让模板过重和难以维护；</li>\\n<li>并且如果多个地方都使用到，那么会有大量重复的代码；</li>\\n</ul>","autoDesc":true}');export{e as data};
