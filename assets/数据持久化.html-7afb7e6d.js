import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-db7ebe6f.js";const p={},e=t(`<p>https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/app-data-persistence-overview-0000001505513497-V2</p><p>应用数据持久化，是指应用将内存中的数据通过文件或数据库的形式保存到设备上。内存中的数据形态通常是任意的数据结构或数据对象，存储介质上的数据形态可能是文本、数据库、二进制文件等。</p><p>HarmonyOS标准系统支持典型的存储数据形态，包括用户首选项、键值型数据库、关系型数据库。</p><p>开发者可以根据如下功能介绍，选择合适的数据形态以满足自己应用数据的持久化需要。</p><ul><li><strong>用户首选项（Preferences）</strong>：通常用于保存应用的配置信息。数据通过文本的形式保存在设备中，应用使用过程中会将文本中的数据全量加载到内存中，所以访问速度快、效率高，但不适合需要存储大量数据的场景。</li><li><strong>键值型数据库（KV-Store）</strong>：一种非关系型数据库，其数据以“键值”对的形式进行组织、索引和存储，其中“键”作为唯一标识符。适合很少数据关系和业务关系的业务数据存储，同时因其在分布式场景中降低了解决数据库版本兼容问题的复杂度，和数据同步过程中冲突解决的复杂度而被广泛使用。相比于关系型数据库，更容易做到跨设备跨版本兼容。</li><li><strong>关系型数据库（RelationalStore）</strong>：一种关系型数据库，以行和列的形式存储数据，广泛用于应用中的关系型数据的处理，包括一系列的增、删、改、查等接口，开发者也可以运行自己定义的SQL语句来满足复杂业务场景的需要。</li></ul><blockquote><p>在 harmony 中, 比较常用的是 用户首选项以及关系型数据库</p></blockquote><h2 id="用户首选项" tabindex="-1"><a class="header-anchor" href="#用户首选项" aria-hidden="true">#</a> 用户首选项</h2><p>https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/data-persistence-by-preferences-0000001505432513-V2</p><p>用户首选项为应用提供Key-Value键值型的数据处理能力，支持应用持久化轻量级数据，并对其修改和查询。当用户希望有一个全局唯一存储的地方，可以采用用户首选项来进行存储。Preferences会将该数据缓存在内存中，当用户读取的时候，能够快速从内存中获取数据，当需要持久化时可以使用flush接口将内存中的数据写入持久化文件中。Preferences会随着存放的数据量越多而导致应用占用的内存越大，因此，Preferences不适合存放过多的数据，适用的场景一般为应用保存用户的个性化设置（字体大小，是否开启夜间模式）等。</p><figure><img src="https://qiniu.waite.wang/202404292336853.png" alt="image-20240429233616769" tabindex="0" loading="lazy"><figcaption>image-20240429233616769</figcaption></figure><blockquote><p>Key 为 string 类型, 要求非空且长度不超过80字节</p><p>Value 可以是 string, number, boolean及以上类型数组, 大小不超过 8192 字节</p><p>数据量建议不超过一万条</p></blockquote><p>下面对<code>preferences</code> 进行封装，基本思路：</p><blockquote><p>注意: 只要在真机预览才能看到效果</p></blockquote><p>在获取<code>preferences</code>实例后会将其保存单例中，这个单例是<code>GlobalContext</code>，方便后期可以通过单例直接获取实例；由于<code>get()</code>返回值类型是不确定性，定义一个联合类型的别名<code>ValueType</code> 来接收</p><div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>// src/main/ets/common/PreferencesUtil.ts

import dataPreferences from &#39;@ohos.data.preferences&#39;
import GlobalContext from &#39;../../common/GlobalContext&#39;
import { LogUtils } from &#39;../LogUtils&#39;
 
const LOG = &#39;PreferencesUtils-PUT&#39;
// 默认文件名(数据库表名)，可以在构造函数进行修改
const PREFERENCES_NAME = &#39;scjgPreferences&#39;
const KEY_PREFERENCES = &#39;preferences&#39;
type ValueType = number | string | boolean | Array&lt;number&gt; | Array&lt;string&gt; | Array&lt;boolean&gt;
 
class PreferencesUtils {
  // preferences的文件名-数据库表名
  private preferencesName: string = PREFERENCES_NAME
  // 用于获取preferences实例的key值，保存到单例中
  private keyPreferences: string = KEY_PREFERENCES
 
  constructor(name: string = PREFERENCES_NAME, key: string = KEY_PREFERENCES) {
    this.preferencesName = name
    this.keyPreferences = key
  }
 
  /**
   * 创建首选项实例
   * @param context: 应用上下文
   * @param preferencesName: 数据库表名
   * @returns
   */
  createPreferences(context): Promise&lt;dataPreferences.Preferences&gt; {
    let preferences = dataPreferences.getPreferences(context, this.preferencesName)
    GlobalContext.getContext().setObject(this.keyPreferences, preferences)
    return
  }
 
  /**
   * 获取首选项实例
   * @returns
   */
  getPreferences(): Promise&lt;dataPreferences.Preferences&gt; {
    return GlobalContext.getContext().getObject(this.keyPreferences) as Promise&lt;dataPreferences.Preferences&gt;
  }
 
  /**
   * 获取数据
   * @param key: 读取key值
   * @param def: 函数出参
   * @returns
   */
  async get(key: string, def?: ValueType): Promise&lt;ValueType&gt; {
    return (await this.getPreferences()).get(key, def)
  }
 
  // 获取全部数据
  async getAll(): Promise&lt;Object&gt; {
    let preferences = await this.getPreferences()
    return preferences.getAll()
  }
 
  /**
   * 插入数据
   * @param key: 存入key值
   * @param value: 存储数据
   * @returns
   */
  async put(key: string, value: ValueType): Promise&lt;void&gt; {
    let promise = await this.getPreferences().then(async preferences =&gt; {
      // 插入数据
      await preferences.put(key, value)
      // 写入文件
      await preferences.flush()
    }).catch(error =&gt; {
      LogUtils.error(LOG, \`code:\${error.code}, message:\${error.message}\`)
    })
    return promise
  }
 
  /**
   * 删除数据
   * @param key: 删除key的value值
   * @returns
   */
  async delete(key: string): Promise&lt;void&gt; {
    return (await this.getPreferences()).delete(key).finally(async () =&gt; {
      (await this.getPreferences()).flush()
    })
  }
 
  // 清空数据
  async clear(): Promise&lt;void&gt; {
    return (await this.getPreferences()).clear().finally(async () =&gt; {
      (await this.getPreferences()).flush()
    })
  }
}
 
export default new PreferencesUtils()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/main/ets/common/GlobalContext.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">GlobalContext</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> GlobalContext
  <span class="token keyword">private</span> _objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Object<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> GlobalContext <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>GlobalContext<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      GlobalContext<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> GlobalContext<span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>

  <span class="token function">getObject</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_objects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">setObject</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> objectClass<span class="token operator">:</span> Object<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_objects<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> objectClass<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在<code>EntryAbility中onCreate()</code>方法初始化：</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token function">onCreate</span><span class="token punctuation">(</span>want<span class="token operator">:</span> Want<span class="token punctuation">,</span> launchParam<span class="token operator">:</span> AbilityConstant<span class="token punctuation">.</span>LaunchParam<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    PreferencesUtils<span class="token punctuation">.</span><span class="token function">createPreferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span>
    hilog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token number">0x0000</span><span class="token punctuation">,</span> <span class="token string">&#39;testTag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%{public}s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ability onCreate&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> PreferencesUtils <span class="token keyword">from</span> <span class="token string">&#39;../common/PreferencesUtil&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct member <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Object<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getAll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
      <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;userName&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;getAll&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;put&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;userName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">await</span>  PreferencesUtils<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
            <span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;delete&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;clear&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> PreferencesUtils<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">justifyContent</span><span class="token punctuation">(</span>FlexAlign<span class="token punctuation">.</span>Center<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qiniu.waite.wang/202404301441674.png" alt="image-20240430144106287" tabindex="0" loading="lazy"><figcaption>image-20240430144106287</figcaption></figure><h2 id="关系型数据库" tabindex="-1"><a class="header-anchor" href="#关系型数据库" aria-hidden="true">#</a> 关系型数据库</h2><p>https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/data-persistence-by-rdb-store-0000001505752421-V2</p><p>关系型数据库基于SQLite组件，适用于存储包含复杂关系数据的场景，比如一个班级的学生信息，需要包括姓名、学号、各科成绩等，又或者公司的雇员信息，需要包括姓名、工号、职位等，由于数据之间有较强的对应关系，复杂程度比键值型数据更高，此时需要使用关系型数据库来持久化保存数据。</p><ul><li><strong>谓词</strong>：数据库中用来代表数据实体的性质、特征或者数据实体之间关系的词项，主要用来定义数据库的操作条件。</li><li><strong>结果集</strong>：指用户查询之后的结果集合，可以对数据进行访问。结果集提供了灵活的数据访问方式，可以更方便地拿到用户想要的数据。</li></ul><p>关系型数据库对应用提供通用的操作接口，底层使用SQLite作为持久化存储引擎，支持SQLite具有的数据库特性，包括但不限于事务、索引、视图、触发器、外键、参数化查询和预编译SQL语句。</p><figure><img src="https://qiniu.waite.wang/202404301738287.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://qiniu.waite.wang/202404301738399.png" alt="image-20240430173835738" tabindex="0" loading="lazy"><figcaption>image-20240430173835738</figcaption></figure><ol><li>使用关系型数据库实现数据持久化，需要获取一个RdbStore。示例代码如下所示：</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> relationalStore <span class="token keyword">from</span> <span class="token string">&#39;@ohos.data.relationalStore&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入模块 </span>
<span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span>windowStage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">STORE_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;RdbTest.db&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库文件名</span>
      securityLevel<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>SecurityLevel<span class="token punctuation">.</span><span class="token constant">S1</span> <span class="token comment">// 数据库安全级别</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token constant">SQL_CREATE_TABLE</span> <span class="token operator">=</span> <span class="token string">&#39;CREATE TABLE IF NOT EXISTS EMPLOYEE (ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME TEXT NOT NULL, AGE INTEGER, SALARY REAL, CODES BLOB)&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 建表Sql语句</span>

    relationalStore<span class="token punctuation">.</span><span class="token function">getRdbStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> <span class="token constant">STORE_CONFIG</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> store<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to get RdbStore. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Succeeded in getting RdbStore.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      store<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token constant">SQL_CREATE_TABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建数据表</span>

      <span class="token comment">// 这里执行数据库的增、删、改、查等操作</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>获取到RdbStore后，调用insert()接口插入数据。示例代码如下所示：</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> valueBucket <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;NAME&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Lisa&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;AGE&#39;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;SALARY&#39;</span><span class="token operator">:</span> <span class="token number">100.5</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;CODES&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&#39;EMPLOYEE&#39;</span><span class="token punctuation">,</span> valueBucket<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> rowId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to insert data. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Succeeded in inserting data. rowId:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rowId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关系型数据库没有显式的flush操作实现持久化，数据插入即保存在持久化文件。</p></blockquote><ol start="3"><li><p>根据谓词指定的实例对象，对数据进行修改或删除。</p><p>调用update()方法修改数据，调用delete()方法删除数据。示例代码如下所示：</p></li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 修改数据</span>
<span class="token keyword">const</span> valueBucket <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;NAME&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;AGE&#39;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;SALARY&#39;</span><span class="token operator">:</span> <span class="token number">200.5</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;CODES&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">relationalStore</span><span class="token punctuation">.</span><span class="token function">RdbPredicates</span><span class="token punctuation">(</span><span class="token string">&#39;EMPLOYEE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建表&#39;EMPLOYEE&#39;的predicates</span>
predicates<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lisa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配表&#39;EMPLOYEE&#39;中&#39;NAME&#39;为&#39;Lisa&#39;的字段</span>
store<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>valueBucket<span class="token punctuation">,</span> predicates<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> rows<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to update data. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Succeeded in updating data. row count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rows<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 删除数据</span>
<span class="token keyword">let</span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">relationalStore</span><span class="token punctuation">.</span><span class="token function">RdbPredicates</span><span class="token punctuation">(</span><span class="token string">&#39;EMPLOYEE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
predicates<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lisa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>predicates<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> rows<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to delete data. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Delete rows: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rows<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>根据谓词指定的查询条件查找数据。</p><p>调用query()方法查找数据，返回一个ResultSet结果集。示例代码如下所示：</p></li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">relationalStore</span><span class="token punctuation">.</span><span class="token function">RdbPredicates</span><span class="token punctuation">(</span><span class="token string">&#39;EMPLOYEE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
predicates<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>predicates<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AGE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SALARY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CODES&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to query data. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ResultSet column names: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resultSet<span class="token punctuation">.</span>columnNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ResultSet column count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resultSet<span class="token punctuation">.</span>columnCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当应用完成查询数据操作，不再使用结果集（ResultSet）时，请及时调用close方法关闭结果集，释放系统为其分配的内存。</p></blockquote><ol start="5"><li><p>删除数据库。</p><p>调用deleteRdbStore()方法，删除数据库及数据库相关文件。示例代码如下</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span>windowStage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    relationalStore<span class="token punctuation">.</span><span class="token function">deleteRdbStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> <span class="token string">&#39;RdbTest.db&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to delete RdbStore. Code:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Succeeded in deleting RdbStore.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>以下是一个案例, 包含增, 查, 代码很粗糙</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/main/ets/utils/DbUtil.ts</span>

<span class="token keyword">import</span> common <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> relationalStore <span class="token keyword">from</span> <span class="token string">&#39;@ohos.data.relationalStore&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ColumnInfo<span class="token punctuation">,</span> ColumnType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../type/ColumnInfo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logger <span class="token keyword">from</span> <span class="token string">&#39;./Logger&#39;</span><span class="token punctuation">;</span>


<span class="token comment">//  操作的数据库名称</span>
<span class="token keyword">const</span> <span class="token constant">DB_FILENAME</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;OliannaWen.db&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">DbUtil</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用变量来获取关系型数据库操作对象</span>
  rdbStore<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>RdbStore


  <span class="token comment">// 初始化数据库</span>
  <span class="token function">initDB</span><span class="token punctuation">(</span>context<span class="token operator">:</span> common<span class="token punctuation">.</span>UIAbilityContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> config<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>StoreConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// 数据库名称</span>
      name<span class="token operator">:</span> <span class="token constant">DB_FILENAME</span><span class="token punctuation">,</span>
      <span class="token comment">// 数据库操作安全等级</span>
      securityLevel<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>SecurityLevel<span class="token punctuation">.</span><span class="token constant">S1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取关系型数据库操作对象</span>
      relationalStore<span class="token punctuation">.</span><span class="token function">getRdbStore</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rdbStore <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>rdbStore <span class="token operator">=</span> rdbStore
          <span class="token comment">// 记录日志</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;rdbStore 初始化完成！&#39;</span><span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>reason <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;rdbStore 初始化异常&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建表函数，传入创建表语句</span>
  <span class="token function">createTable</span><span class="token punctuation">(</span>createSQL<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rdbStore<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span>createSQL<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;创建表成功&#39;</span><span class="token punctuation">,</span> createSQL<span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;创建表失败,&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 建立insert方法的映射关系（实体数据插入到数据库的字段映射）</span>
  <span class="token function">buildValueBucket</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> columns<span class="token operator">:</span> ColumnInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>ValuesBucket <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    columns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>info <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> val <span class="token operator">=</span> obj<span class="token punctuation">[</span>info<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">[</span>info<span class="token punctuation">.</span>columnName<span class="token punctuation">]</span> <span class="token operator">=</span> val
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>


  <span class="token comment">// 新增方法，参数为表名称和新增对象</span>
  <span class="token function">insert</span><span class="token punctuation">(</span>tableName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> columns<span class="token operator">:</span> ColumnInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1.构建新增数据</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildValueBucket</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> columns<span class="token punctuation">)</span>
      <span class="token comment">// 2.新增</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rdbStore<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;新增失败！&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;新增成功！新增id：&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 删除方法,传入删除条件</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>predicates<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>RdbPredicates<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rdbStore<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>predicates<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> rows<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;删除失败！&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功！删除行数：&#39;</span><span class="token punctuation">,</span> rows<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 查询方法,传入查询条件,字段,返回结果</span>
  <span class="token generic-function"><span class="token function">queryForList</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>predicates<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>RdbPredicates<span class="token punctuation">,</span> columns<span class="token operator">:</span> ColumnInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;dddfafa&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rdbStore<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>predicates<span class="token punctuation">,</span> columns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>info <span class="token operator">=&gt;</span> info<span class="token punctuation">.</span>columnName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;查询失败！&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;查询成功！查询行数：&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>rowCount<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseResultSet</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> columns<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 解析结果集</span>
  <span class="token generic-function"><span class="token function">parseResultSet</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token operator">:</span> relationalStore<span class="token punctuation">.</span>ResultSet<span class="token punctuation">,</span> columns<span class="token operator">:</span> ColumnInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.声明最终返回的结果</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 2.判断是否有结果</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>rowCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arr
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.处理结果</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>isAtLastRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 3.1.去下一行</span>
      result<span class="token punctuation">.</span><span class="token function">goToNextRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 3.2.解析这行数据，转为对象</span>
      <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      columns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>info <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> ColumnType<span class="token punctuation">.</span><span class="token constant">LONG</span><span class="token operator">:</span>
            val <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
          <span class="token keyword">case</span> ColumnType<span class="token punctuation">.</span><span class="token constant">DOUBLE</span><span class="token operator">:</span>
            val <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
          <span class="token keyword">case</span> ColumnType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token operator">:</span>
            val <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
          <span class="token keyword">case</span> ColumnType<span class="token punctuation">.</span><span class="token constant">BLOB</span><span class="token operator">:</span>
            val <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">[</span>info<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 3.3.将对象填入结果数组</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
      Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;查询到数据：&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> dbUtil<span class="token operator">:</span> DbUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> dbUtil <span class="token keyword">as</span> DbUtil
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/main/ets/entryability/EntryAbility.ets</span>
<span class="token keyword">async</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>want<span class="token punctuation">,</span> launchParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化任务表</span>
  <span class="token keyword">await</span> DbUtil<span class="token punctuation">.</span><span class="token function">initDB</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> dbUtil <span class="token keyword">from</span> <span class="token string">&#39;../utils/DbUtil&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logger <span class="token keyword">from</span> <span class="token string">&#39;../utils/Logger&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> relationalStore <span class="token keyword">from</span> <span class="token string">&#39;@ohos.data.relationalStore&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> ColumnType <span class="token punctuation">{</span>
  <span class="token constant">LONG</span><span class="token punctuation">,</span>
  <span class="token constant">DOUBLE</span><span class="token punctuation">,</span>
  <span class="token constant">STRING</span><span class="token punctuation">,</span>
  <span class="token constant">BLOB</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ColumnInfo</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实体字段</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 映射到数据库对应的字段</span>
  columnName<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 数据库字段类型</span>
  type<span class="token operator">:</span> ColumnType
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ValuesBucket</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">DB_NAME</span> <span class="token operator">=</span> <span class="token string">&#39;testDB&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">TABLE_NAME</span> <span class="token operator">=</span> <span class="token string">&#39;table1&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">SQL_CREATE_TABLE</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  CREATE TABLE IF NOT EXISTS </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">TABLE_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NAME TEXT NOT NULL,
    AGE INTEGER,
    SALARY REAL,
    CODES BLOB
  )
</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">const</span> columns<span class="token operator">:</span> ColumnInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> columnName<span class="token operator">:</span> <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> ColumnType<span class="token punctuation">.</span><span class="token constant">STRING</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;AGE&#39;</span><span class="token punctuation">,</span> columnName<span class="token operator">:</span> <span class="token string">&#39;AGE&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> ColumnType<span class="token punctuation">.</span><span class="token constant">LONG</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;SALARY&#39;</span><span class="token punctuation">,</span> columnName<span class="token operator">:</span> <span class="token string">&#39;SALARY&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> ColumnType<span class="token punctuation">.</span><span class="token constant">DOUBLE</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;CODES&#39;</span><span class="token punctuation">,</span> columnName<span class="token operator">:</span> <span class="token string">&#39;CODES&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> ColumnType<span class="token punctuation">.</span><span class="token constant">BLOB</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>


<span class="token keyword">const</span> valBucket<span class="token operator">:</span> ValuesBucket <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;NAME&#39;</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;AGE&#39;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;SALARY&#39;</span><span class="token operator">:</span> <span class="token number">5000.50</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;CODES&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">relationalStore</span><span class="token punctuation">.</span><span class="token function">RdbPredicates</span><span class="token punctuation">(</span><span class="token constant">TABLE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">createTable</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> dbUtil<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token constant">SQL_CREATE_TABLE</span><span class="token punctuation">)</span>
  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">insertData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> dbUtil<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token constant">TABLE_NAME</span><span class="token punctuation">,</span> valBucket<span class="token punctuation">,</span> columns<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">queryData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> dbUtil<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>predicates<span class="token punctuation">,</span> columns<span class="token punctuation">)</span>
  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>
  createTable<span class="token punctuation">,</span> insertData<span class="token punctuation">,</span> queryData 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createTable<span class="token punctuation">,</span> insertData<span class="token punctuation">,</span> queryData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../viewmodel/useDb&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Index <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;Create&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;Insert&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;Query&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">await</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>


    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qiniu.waite.wang/202405061531517.png" alt="image-20240506153110474" tabindex="0" loading="lazy"><figcaption>image-20240506153110474</figcaption></figure><figure><img src="https://qiniu.waite.wang/202405061531929.png" alt="image-20240506153146460" tabindex="0" loading="lazy"><figcaption>image-20240506153146460</figcaption></figure>`,45),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","数据持久化.html.vue"]]);export{k as default};
