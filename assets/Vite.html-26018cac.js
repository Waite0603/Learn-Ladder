import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,b as s,d as n,e as t,a as e}from"./app-db7ebe6f.js";const c={},u=s("blockquote",null,[s("p",null,"https://cn.vitejs.dev/guide/")],-1),r=s("h2",{id:"什么是-vite",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么是-vite","aria-hidden":"true"},"#"),n(" 什么是 Vite")],-1),d=s("code",null,"/vit/",-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vitejs.dev/guide/features.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.vitejs.dev/guide/features.html#hot-module-replacement",target:"_blank",rel:"noopener noreferrer"},g={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cn.vitejs.dev/guide/features.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://cn.vitejs.dev/guide/using-plugins.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://cn.vitejs.dev/config/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://cn.vitejs.dev/guide/api-plugin.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cn.vitejs.dev/guide/api-javascript.html",target:"_blank",rel:"noopener noreferrer"},x=s("li",null,"Vite作为一个基于浏览器原生ESM的构建工具，它省略了开发环境的打包过程，利用浏览器去解析imports，在服务端按需编译返回。同时，在开发环境拥有速度快到惊人的模块热更新，且热更新的速度不会随着模块增多而变慢。因此，使用Vite进行开发，至少会比Webpack快10倍左右。",-1),S={href:"https://cn.vitejs.dev/guide/why.html",target:"_blank",rel:"noopener noreferrer"},j=e('<h3 id="vite的主要特性" tabindex="-1"><a class="header-anchor" href="#vite的主要特性" aria-hidden="true">#</a> Vite的主要特性</h3><ul><li>Instant Server Start —— 即时服务启动</li><li>Lightning Fast HMR —— 闪电般快速的热更新</li><li>Rich Features —— 丰富的功能</li><li>Optimized Build —— 经过优化的构建</li><li>Universal Plugin Interface —— 通用的Plugin接口</li><li>Fully Typed APIs —— 类型齐全的API</li></ul><h3 id="主流构建工具对比" tabindex="-1"><a class="header-anchor" href="#主流构建工具对比" aria-hidden="true">#</a> 主流构建工具对比</h3><p><strong>Browserify</strong></p><p>预编译模块化方案（文件打包工具）</p><ul><li>Browserify基于流方式干净灵活</li><li>遵循commonJS规范打包JS</li><li>可引入插件打包CSS等其他资源（非原生能力）</li></ul><p><strong>Gulp</strong></p><ul><li>基于流的自动化构建工具（工程化）</li><li>配置复杂度高，偏向编程式，需要定义task处理构建</li><li>支持监听读写文件</li><li>可搭配Browserify等模块化工具来使用</li></ul><p><strong>Parcel</strong></p><ul><li>极速打包（工程化：极速0配置）</li><li>零配置，但造成了配置不灵活，内置常见场景的构建方案及其依赖，无需再次安装（babel等）</li><li>以html入口，自动检测和打包依赖</li><li>不支持SourceMap</li><li>无法Tree-shaking</li></ul><p><strong>Webpack</strong></p><ul><li>预编译模块化方案（工程化：大而全）</li><li>通过配置文件达到一站式配置</li><li>loader进行资源转换，功能全面（css+js+icon+front）</li><li>插件丰富，灵活扩展</li><li>社群庞大</li><li>大型项目构建慢</li></ul><p><strong>Rollup</strong></p><ul><li>基于ES6打包（模块打包工具）</li><li>Tree-shaking</li><li>打包文件小且干净，执行效率更高</li><li>更专注于JS打包</li></ul><p><strong>Snowpack</strong></p><ul><li>基于ESM运行时编译（工程化：ESM运行时）</li><li>无需递归循环依赖组装依赖树</li><li>默认输出单独的构建模块（未打包），可选择不同打包器（webpack、rollup等）</li></ul><p><strong>Vite</strong></p><ul><li>基于ESM运行时打包</li><li>借鉴了Snowpack</li><li>生产环境使用Rollup，集成度更高，相比Snowpack支持多页面、库模式、动态导入自动polyfill等</li></ul><h2 id="为什么使用-vite" tabindex="-1"><a class="header-anchor" href="#为什么使用-vite" aria-hidden="true">#</a> 为什么使用 Vite</h2><h3 id="开发环境⚡️速度的提升" tabindex="-1"><a class="header-anchor" href="#开发环境⚡️速度的提升" aria-hidden="true">#</a> <strong>开发环境⚡️速度的提升</strong></h3><ol><li>使用JS开发的工具通常需要很长的时间才能启动开发服务器，且这个启动时间与代码量、代码复杂度正相关。即使使用HMR，文件修改后的效果也要几秒钟才能在浏览器中反应出来，代表如Webpack。那么Vite是如何解决如Webpack这样的构建工具一样，在复杂、多模块项目开发中启动慢、HMR慢的问题呢？</li><li>我们详细对比了开发环境中的Vite和Webpack，发现主要有如下不同：</li></ol><table><thead><tr><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>先打包生成bundle，再启动开发服务器</td><td>先启动开发服务器，利用新一代浏览器的ESM能力，无需打包，直接请求所需模块并实时编译</td></tr><tr><td>HMR时需要把改动模块及相关依赖全部编译</td><td>HMR时只需让浏览器重新请求该模块，同时利用浏览器的缓存（源码模块协商缓存，依赖模块强缓存）来优化请求</td></tr><tr><td>内存高效利用</td><td>-</td></tr></tbody></table><ol start="3"><li>因此，针对开发环境中的启动慢问题，Vite开发环境冷启动无需打包，无需分析模块之间的依赖，同时也无需在启动开发服务器前进行编译，启动时还会使用 <strong>esbuild</strong> 来进行预构建。而Webpack 启动后会做一堆事情，经历一条很长的编译打包链条，从入口开始需要逐步经历语法解析、依赖收集、代码转译、打包合并、代码优化，最终将高版本的、离散的源码编译打包成低版本、高兼容性的产物代码;</li><li>针对HMR慢，即使只有很小的改动，Webpack依然需要构建完整的模块依赖图，并根据依赖图来进行转换。而Vite利用了ESM和浏览器缓存技术，更新速度与项目复杂度无关。可以看到，如Snowpack、Vite这类面相非打包的构建工具，在开发环境启动时只需要启动两个Server，一个用于页面加载，一个用于HMR的Websocket。当浏览器发出原生的ESM请求，Server收到请求只需要编译当前文件后返回给浏览器，不需要管理依赖。</li></ol><figure><img src="https://qiniu.waite.wang/202311221718913.png" alt="image-20231122171817220" tabindex="0" loading="lazy"><figcaption>image-20231122171817220</figcaption></figure><figure><img src="https://qiniu.waite.wang/202311221718035.png" alt="image-20231122171839049" tabindex="0" loading="lazy"><figcaption>image-20231122171839049</figcaption></figure><h3 id="使用简单-开箱即用" tabindex="-1"><a class="header-anchor" href="#使用简单-开箱即用" aria-hidden="true">#</a> <strong>使用简单，开箱即用</strong></h3><p>相比Webpack需要对entry、loader、plugin等进行诸多配置，Vite的使用可谓是相当简单了。只需执行初始化命令，就可以得到一个预设好的开发环境，开箱即获得一堆功能，包括：CSS预处理、html预处理、异步加载、分包、压缩、HMR等。他使用复杂度介于Parcel和Webpack的中间，只是暴露了极少数的配置项和plugin接口，既不会像Parcel一样配置不灵活，又不会像Webpack一样需要了解庞大的loader、plugin生态，灵活适中、复杂度适中。适合前端新手。</p><h2 id="vite-的安装与使用" tabindex="-1"><a class="header-anchor" href="#vite-的安装与使用" aria-hidden="true">#</a> Vite 的安装与使用</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3>',29),_={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},E=e(`<ul><li><p>首先，我们安装一下vite工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install vite –g # 全局安装 
npm install vite –D # 局部安装
12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过vite来启动项目：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="vite构建vue3项目" tabindex="-1"><a class="header-anchor" href="#vite构建vue3项目" aria-hidden="true">#</a> Vite构建Vue3项目</h3><p>使用 NPM:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>npm create vite@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 Yarn:</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>yarn create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Need to install the following packages:
  create-vite@4.2.0
Ok to proceed? (y) y
✔ Project name: … vite-vue3
? Select a framework: › - Use arrow-keys. Return to submit.
    Vanilla     （如果你要使用Vue2可以用这个方式，然后再自己配置一下vite-plugin-vue2插件）
 ❯  Vue         （默认是Vue3项目）
    React       （React项目）
    Preact      （比React项目轻量级的Preact项目）
    Lit
    Svelte
    Others
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们要构建Vue3的项目，所以这里我们选择Vue就行了，然后下一步选择开发语言</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>✔ Project name: … vite-vue3
✔ Select a framework: › Vue
? Select a variant: › - Use arrow-keys. Return to submit.
❯   JavaScript
    TypeScript
    Customize with create-vue ↗
    Nuxt ↗
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cd 进项目路径, <code>npm install</code>, 然后 <code>npm run dev</code> 运行即可</p><figure><img src="https://qiniu.waite.wang/7C797674-06CF-4E87-B344-63990EF519B6.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="vite-支持" tabindex="-1"><a class="header-anchor" href="#vite-支持" aria-hidden="true">#</a> Vite 支持</h2><h3 id="css-支持" tabindex="-1"><a class="header-anchor" href="#css-支持" aria-hidden="true">#</a> Css 支持</h3><ul><li><p>vite可以直接支持css的处理</p><ul><li>直接导入css即可；</li></ul></li><li><p>vite可以直接支持css预处理器，比如less</p><ul><li>直接导入less；</li><li>之后安装less编译器；</li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code> npm install less <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>vite直接支持postcss的转换：</li><li>只需要安装postcss，并且配置 postcss.config.js 的配置文件即可；</li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>npm install postcss postcss<span class="token operator">-</span>preset<span class="token operator">-</span>env <span class="token operator">-</span>D

<span class="token comment">// 在项目中创建 postcss.config.ts</span>
const postcssPresetEnv = <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token selector">module.exports =</span> <span class="token punctuation">{</span>
  <span class="token comment">// 安装了一个预设 预设就是相当于最佳实践，已经帮你安装好了很多东西</span>
  <span class="token property">plugin</span><span class="token punctuation">:</span> [<span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token comment">/* pluginOptions */</span><span class="token punctuation">)</span>]
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局导入" tabindex="-1"><a class="header-anchor" href="#全局导入" aria-hidden="true">#</a> 全局导入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 其他配置项...</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          @import &quot;@/style/globalVar.scss&quot;;
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 其他配置项...</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/src&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="ts-支持" tabindex="-1"><a class="header-anchor" href="#ts-支持" aria-hidden="true">#</a> Ts 支持</h3><ul><li>vite对TypeScript是原生支持的，它会直接使用ESBuild来完成编译： <ul><li>只需要直接导入即可；</li></ul></li><li>如果我们查看浏览器中的请求，会发现请求的依然是ts的代码： <ul><li>这是因为vite中的服务器Connect会对我们的请求进行转发；</li><li>获取ts编译后的代码，给浏览器返回，浏览器可以直接进行解析；</li></ul></li></ul><h3 id="vue支持" tabindex="-1"><a class="header-anchor" href="#vue支持" aria-hidden="true">#</a> vue支持</h3><ul><li><p>vite对vue提供第一优先级支持：</p><ul><li>Vue 3 单文件组件支持：@vitejs/plugin-vue</li><li>Vue 3 JSX 支持：@vitejs/plugin-vue-jsx</li><li>Vue 2 支持：underfin/vite-plugin-vue2</li></ul></li><li><p>安装支持vue的插件：</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code> npm install <span class="token variable">@vitejs</span><span class="token operator">/</span>plugin<span class="token operator">-</span>vue <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在vite.config.js中配置插件</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vitejs/plugin-vue&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-原理" tabindex="-1"><a class="header-anchor" href="#vite-原理" aria-hidden="true">#</a> Vite 原理</h2><h3 id="esm-esbuild" tabindex="-1"><a class="header-anchor" href="#esm-esbuild" aria-hidden="true">#</a> ESM&amp;esbuild</h3><h4 id="esm" tabindex="-1"><a class="header-anchor" href="#esm" aria-hidden="true">#</a> ESM</h4><p>在ES6没有出现之前，随着js代码日益膨胀，往往会对资源模块化来提效，这也就出现了多个模块化方案。如CommonJS常用于服务端，AMD、CMD规范常用在客户端。ES6出现后，紧接着出现了ESM。ESM是浏览器支持的一种模块化方案，允许在浏览器实现模块化。</p><ul><li>CommonJS：模块同步，如Browserify会对代码进行解析，整理出代码中的所有模块依赖关系，然后把nodejs的模块编译成浏览器可用的模块，相关的模块代码都打包在一起，形成一个完整的JS文件，这个文件中不会存在 require 这类的模块化语法，变成可以在浏览器中运行的普通JS，运行时加载</li><li>AMD：模块异步，依赖前置，是requireJS在推广过程中对模块定义的规范化产出，加载完依赖后立即执行依赖模块，依赖加载成功后执行回调</li><li>CMD：模块异步，延迟执行，是seaJS在推广过程中对模块定义的规范化产出，就近依赖，先加载所有依赖模块，运行时才执行require内容，按顺序执行</li></ul><p>与CommonJS、AMD不同，ESM的对外接口只是一种静态定义，为编译时加载，遇到模块加载命令import，就会生成一个只读引用。等脚本真正执行时，再根据这个只读引用，到被加载的那个模块内取值。由于ESM编译时就能确定模块的依赖关系，因此能够只包含要运行的代码，可以显著减少文件体积，降低浏览器压力。</p><p>由于ESM是一个比较新的模块化方案，目前其浏览器能力支持如下：</p><figure><img src="https://qiniu.waite.wang/202311221721568.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，除了IE、Opera等，新一代浏览器中绝大部分都已支持。</p><p>接下来以Vite创建的模板为例，看一下ESM的解析过程：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./assets/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello Vue 3.0 + Vite<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;./components/HelloWorld.vue&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      HelloWorld
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当浏览器解析 import HelloWorld from &#39;./components/HelloWorld.vue&#39; 时，会向当前域名发送一个请求获取对应的资源（ESM支持解析相对路径）</li><li>浏览器下载对应的文件，然后解析成模块记录。接下来会进行实例化，为模块分配内存，然后按照导入、导出语句建立模块和内存的映射关系。最后，运行上述代码，把内存空间填充为真实的值。</li></ul><h4 id="esbuild" tabindex="-1"><a class="header-anchor" href="#esbuild" aria-hidden="true">#</a> esbuild</h4><ul><li>ESBuild的特点： <ul><li>超快的构建速度，并且不需要缓存；</li><li>支持ES6和CommonJS的模块化；</li><li>支持ES6的Tree Shaking；</li><li>支持Go、JavaScript的API；</li><li>支持TypeScript、JSX等语法编译；</li><li>支持SourceMap；</li><li>支持代码压缩；</li><li>支持扩展其他插件；</li></ul></li><li>ESBuild的构建速度和其他构建工具速度对比：</li></ul><figure><img src="https://qiniu.waite.wang/202311221724703.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>ESBuild为什么这么快呢？ <ul><li>使用Go语言编写的，可以直接转换成机器代码，而无需经过字节码；</li><li>ESBuild可以充分利用CPU的多内核，尽可能让它们饱和运行；</li><li>ESBuild的所有内容都是从零开始编写的，而不是使用第三方，所以从一开始就可以考虑各种性能问题；</li></ul></li></ul><h3 id="依赖处理" tabindex="-1"><a class="header-anchor" href="#依赖处理" aria-hidden="true">#</a> <strong>依赖处理</strong></h3><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。<strong>依赖</strong> 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。</p><ul><li><strong>依赖解析</strong></li></ul><p>以 Vite 官方 demo 为例，当我们请求 <strong>localhost:3000</strong> 时，Vite 默认返回 <strong>localhost:3000/index.html</strong> 的代码。而后发送请求 <strong>src/main.js</strong>。</p><p>main.js 代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qiniu.waite.wang/202311222321963.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以观察到浏览器请求 vue.js 时， 请求路径是 <strong>@modules/vue.js</strong>。在 Vite 中约定若 path 的请求路径满足 <strong>/^/@modules//</strong> 格式时，被认为是一个 node_modules 模块。</p><p>平时开发中，webpack &amp; rollup(rollup有对应插件) 等打包工具会帮我们找到模块的路径，但浏览器只能通过相对路径去寻找，而如果是直接使用模块名比如：<strong>import vue from &#39;vue&#39;</strong>，浏览器就会报错，这个时候就需要一个三方包进行处理。Vite 对ESM形式的 js 文件模块使用了 ES Module Lexer 处理。Lexer 会找到代码中以 import 语法导入的模块并以数组形式返回。Vite 通过该数组的值获取判断是否为一个 node_modules 模块。若是则进行对应改写成 @modules/:id 的写法。</p><p>重写完路径后，浏览器会发送 path 为 /@modules/:id 的对应请求，接下来会被 Vite 客户端做一层拦截来解析模块的真实位置。</p><p>首先正则匹配请求路径，如果是/@modules开头就进行后续处理，否则就跳过。若是，会设置响应类型为js，读取真实模块路径内容，返回给客户端。</p><p>客户端注入本质上是创建一个script标签（type=&#39;module&#39;），然后将其插入到head中，这样客户端在解析html是就可以执行代码了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> moduleRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/@modules\\/</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// plugin for resolving /@modules/:id requests.</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moduleRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// path maybe contain encode chars</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>moduleRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">serve</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">file</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在代码中做一个缓存，下次访问相同路径直接从 map 中获取 304 返回</span>
    moduleIdToFileMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
    moduleFileToIdMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getDebugPath</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
  <span class="token comment">// 兼容 alias 情况</span>
  <span class="token keyword">const</span> importerFilePath <span class="token operator">=</span> importer <span class="token operator">?</span> resolver<span class="token punctuation">.</span><span class="token function">requestToFile</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span> <span class="token operator">:</span> root
  <span class="token keyword">const</span> nodeModulePath <span class="token operator">=</span> <span class="token function">resolveNodeModuleFile</span><span class="token punctuation">(</span>importerFilePath<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
  <span class="token comment">// 如果是个 node_modules 的模块，读取文件。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeModulePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">serve</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> nodeModulePath<span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>依赖预构建</strong></li></ul><p>依赖预构建主要有两个目的：</p><ul><li><strong>CommonJS 和 UMD 兼容性:</strong> 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</li><li><strong>性能：</strong> Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</li></ul><p>Vite使用esbuild在初次启动开发服务器前把检测到的依赖进行预构建。Vite 基于ESM，在使用某些模块时，由于模块依赖了另一些模块，依赖的模块又基于另一些模块。会出现页面初始化时一次发送数百个模块请求的情况。</p><p>以 lodash-es 为例，代码中以 import { debounce } from &#39;lodash&#39; 导入一个命名函数时候，并不是只下载包含这个函数的文件，而是有一个依赖图。</p><figure><img src="https://qiniu.waite.wang/202311222322996.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Vite 为了优化请求数量和速度，利用esbuild在启动的时候预先把debounce用到的所有内部模块全部打包成一个bundle，这样就浏览器在请求debounce时，便只需要发送一次请求了</p><h4 id="静态资源加载" tabindex="-1"><a class="header-anchor" href="#静态资源加载" aria-hidden="true">#</a> <strong>静态资源加载</strong></h4><p>当请求的路径符合 imageRE, mediaRE, fontsRE 或 JSON 格式，会被认为是一个静态资源。静态资源将处理成ESM模块返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/node/utils/pathUtils.ts</span>
<span class="token keyword">const</span> imageRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|svg|ico|webp)(\\?.*)?$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> mediaRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> fontsRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff2?|eot|ttf|otf)(\\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isStaticAsset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> imageRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> mediaRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> fontsRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/node/server/serverPluginAssets.ts</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticAsset</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isImportRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">export</span> <span class="token keyword">default</span> $<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// 输出是path</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">jsonPlugin</span><span class="token operator">:</span> <span class="token function-variable function">ServerPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// handle .json imports</span>
    <span class="token comment">// note ctx.body could be null if upstream set status to 304</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isImportRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">dataToEsm</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readBody</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">namedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">preferConst</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue文件缓存" tabindex="-1"><a class="header-anchor" href="#vue文件缓存" aria-hidden="true">#</a> <strong>vue文件缓存</strong></h4><p>当 Vite 遇到一个 .vue 后缀的文件时。由于 .vue 模板文件的特殊性，它被拆分成 template, css, script 模块三个模块进行分别处理。最后会对 script, template, css 发送多个请求获取</p><figure><img src="https://qiniu.waite.wang/202311222324430.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="js-ts处理" tabindex="-1"><a class="header-anchor" href="#js-ts处理" aria-hidden="true">#</a> <strong>js/ts处理</strong></h4><p>Vite使用esbuild将ts转译到js，约是tsc速度的20～30倍，同时HMR更新反应到浏览器的时间会小于50ms。但是，由于esbuild转换ts到js对于类型操作仅仅是擦除，所以完全保证不了类型正确，因此需要额外校验类型，比如使用tsc --noEmit。</p><p>将ts转换成js后，浏览器便可以利用ESM直接拿到js资源。</p><h3 id="热更新原理" tabindex="-1"><a class="header-anchor" href="#热更新原理" aria-hidden="true">#</a> 热更新原理</h3><p>Vite 的热加载原理，其实就是在客户端与服务端建立了一个 websocket 连接，当代码被修改时，服务端发送消息通知客户端去请求修改模块的代码，完成热更新。</p><ul><li>服务端：服务端做的就是监听代码文件的改变，在合适的时机向客户端发送 websocket 信息通知客户端去请求新的模块代码。</li><li>客户端：Vite 中客户端的 websocket 相关代码在处理 html 中时被写入代码中。可以看到在处理 html 时，vite/client 的相关代码已经被插入。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> clientPublicPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/vite/client</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> devInjectionCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n&lt;script type=&quot;module&quot;&gt;import &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clientPublicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&lt;/script&gt;\\n</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">rewriteHtml</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">importer</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">html</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">injectScriptToHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> devInjectionCode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当request.path 路径是 /vite/client 时，请求获取已经提前写好的关于 websocket 的代码。因此在客户端中我们创建了一个 websocket 服务并与服务端建立了连接。</p><p>Vite 会接受到来自客户端的消息。通过不同的消息触发一些事件。做到浏览器端的即时热模块更换（热更新）。包括 connect、vue-reload、vue-rerender 等事件，分别触发组件vue 的重新加载，render等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Listen for messages</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">as</span> HMRPayload <span class="token operator">|</span> MultiUpdatePayload
  <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;multi&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    payload<span class="token punctuation">.</span>updates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>handleMessage<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">handleMessage</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">payload</span><span class="token operator">:</span> HMRPayload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> changeSrcPath<span class="token punctuation">,</span> timestamp <span class="token punctuation">}</span> <span class="token operator">=</span> payload <span class="token keyword">as</span> UpdatePayload
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;connected&#39;</span><span class="token operator">:</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] connected.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;vue-reload&#39;</span><span class="token operator">:</span>
      <span class="token function">queueUpdate</span><span class="token punctuation">(</span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">warnFailedFetch</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            __VUE_HMR_RUNTIME__<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> m<span class="token punctuation">.</span>default<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> reloaded.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;vue-rerender&#39;</span><span class="token operator">:</span>
      <span class="token keyword">const</span> templatePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?type=template</span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>templatePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        __VUE_HMR_RUNTIME__<span class="token punctuation">.</span><span class="token function">rerender</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> m<span class="token punctuation">.</span>render<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> template updated.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;style-update&#39;</span><span class="token operator">:</span>
      <span class="token comment">// check if this is referenced in html via &lt;link&gt;</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">link[href*=&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>
          <span class="token string">&#39;href&#39;</span><span class="token punctuation">,</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&amp;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;?&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> importQuery <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&amp;import&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;?import&#39;</span>
      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>importQuery<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> updated.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;js-update&#39;</span><span class="token operator">:</span>
      <span class="token function">queueUpdate</span><span class="token punctuation">(</span><span class="token function">updateModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> changeSrcPath<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;custom&#39;</span><span class="token operator">:</span>
      <span class="token keyword">const</span> cbs <span class="token operator">=</span> customUpdateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>customData<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;full-reload&#39;</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// if html file is edited, only reload the page if the browser is</span>
        <span class="token comment">// currently on that page.</span>
        <span class="token keyword">const</span> pagePath <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          pagePath <span class="token operator">===</span> path <span class="token operator">||</span>
          <span class="token punctuation">(</span>pagePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pagePath <span class="token operator">+</span> <span class="token string">&#39;index.html&#39;</span> <span class="token operator">===</span> path<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71);function V(M,P){const a=o("ExternalLinkIcon");return i(),l("div",null,[u,r,s("ul",null,[s("li",null,[n('Vite（法语意为 "快速的"，发音 '),d,n('，发音同 "veet"）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成： '),s("ul",null,[s("li",null,[n("一个开发服务器(dev server)，它基于 "),s("a",k,[n("原生 ES 模块"),t(a)]),n(" 提供了 "),s("a",v,[n("丰富的内建功能"),t(a)]),n("，如速度快到惊人的 "),s("a",m,[n("模块热更新（HMR）"),t(a)]),n("。")]),s("li",null,[n("一套构建指令，它使用 "),s("a",g,[n("Rollup"),t(a)]),n(" 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。")])])]),s("li",null,[n("Vite 是一种具有明确建议的工具，具备合理的默认设置。您可以在 "),s("a",b,[n("功能指南"),t(a)]),n(" 中了解 Vite 的各种可能性。通过 "),s("a",h,[n("插件"),t(a)]),n("，Vite 支持与其他框架或工具的集成。如有需要，您可以通过 "),s("a",f,[n("配置部分"),t(a)]),n(" 自定义适应你的项目。")]),s("li",null,[n("Vite 还提供了强大的扩展性，可通过其 "),s("a",y,[n("插件 API"),t(a)]),n(" 和 "),s("a",w,[n("JavaScript API"),t(a)]),n(" 进行扩展，并提供完整的类型支持。")]),x,s("li",null,[n("你可以在 "),s("a",S,[n("为什么选 Vite"),t(a)]),n(" 部分深入了解该项目的设计理念。")])]),j,s("blockquote",null,[s("p",null,[n("Vite 需要 "),s("a",_,[n("Node.js"),t(a)]),n(" 版本 18+，20+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。")])]),E])}const C=p(c,[["render",V],["__file","Vite.html.vue"]]);export{C as default};
