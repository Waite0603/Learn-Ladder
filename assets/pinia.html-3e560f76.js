const t=JSON.parse('{"key":"v-71097562","path":"/web/vue/learn/store/pinia.html","title":"Pinia","lang":"zh-CN","frontmatter":{"title":"Pinia","icon":"post","order":2,"date":"2023-12-27T00:00:00.000Z","description":"为什么使用 Pinia? https://pinia.vuejs.org/zh/ Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。如果你熟悉组合式 API 的话，你可能会认为可以通过一行简单的 export const state = reactive({}) 来共享一个全局状态。对于单页应用来说确实可以，但如果应用在服务器端渲染，这可能会使你的应用暴露出一些安全漏洞。 而如果使用 Pinia，即使在小型单页应用中，你也可以获得如下功能： Devtools 支持 追踪 actions、mutations 的时间线 在组件中展示它们所用到的 Store 让调试更容易的 Time travel 热更新 不必重载页面即可修改 Store 开发时可保持当前的 State 插件：可通过插件扩展 Pinia 功能 为 JS 开发者提供适当的 TypeScript 支持以及自动补全功能。 支持服务端渲染","head":[["meta",{"property":"og:url","content":"https://brain.sunguoqi.com/web/vue/learn/store/pinia.html"}],["meta",{"property":"og:site_name","content":"Waite Wang"}],["meta",{"property":"og:title","content":"Pinia"}],["meta",{"property":"og:description","content":"为什么使用 Pinia? https://pinia.vuejs.org/zh/ Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。如果你熟悉组合式 API 的话，你可能会认为可以通过一行简单的 export const state = reactive({}) 来共享一个全局状态。对于单页应用来说确实可以，但如果应用在服务器端渲染，这可能会使你的应用暴露出一些安全漏洞。 而如果使用 Pinia，即使在小型单页应用中，你也可以获得如下功能： Devtools 支持 追踪 actions、mutations 的时间线 在组件中展示它们所用到的 Store 让调试更容易的 Time travel 热更新 不必重载页面即可修改 Store 开发时可保持当前的 State 插件：可通过插件扩展 Pinia 功能 为 JS 开发者提供适当的 TypeScript 支持以及自动补全功能。 支持服务端渲染"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T16:12:32.000Z"}],["meta",{"property":"article:published_time","content":"2023-12-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T16:12:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pinia\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T16:12:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"为什么使用 Pinia?","slug":"为什么使用-pinia","link":"#为什么使用-pinia","children":[]},{"level":2,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[]},{"level":2,"title":"State","slug":"state","link":"#state","children":[]},{"level":2,"title":"getters","slug":"getters","link":"#getters","children":[]},{"level":2,"title":"actions","slug":"actions","link":"#actions","children":[]},{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[]}],"git":{"createdTime":1703607152000,"updatedTime":1703607152000,"contributors":[{"name":"Waite Wang","email":"waite@waite.wang","commits":1}]},"readingTime":{"minutes":5.5,"words":1651},"filePathRelative":"web/vue/learn/store/pinia.md","localizedDate":"2023年12月27日","excerpt":"<h2> 为什么使用 Pinia?</h2>\\n<blockquote>\\n<p>https://pinia.vuejs.org/zh/</p>\\n</blockquote>\\n<p>Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。如果你熟悉组合式 API 的话，你可能会认为可以通过一行简单的 <code>export const state = reactive({})</code> 来共享一个全局状态。对于单页应用来说确实可以，但如果应用在服务器端渲染，这可能会使你的应用暴露出一些安全漏洞。 而如果使用 Pinia，即使在小型单页应用中，你也可以获得如下功能：</p>\\n<ul>\\n<li>Devtools 支持\\n<ul>\\n<li>追踪 actions、mutations 的时间线</li>\\n<li>在组件中展示它们所用到的 Store</li>\\n<li>让调试更容易的 Time travel</li>\\n</ul>\\n</li>\\n<li>热更新\\n<ul>\\n<li>不必重载页面即可修改 Store</li>\\n<li>开发时可保持当前的 State</li>\\n</ul>\\n</li>\\n<li>插件：可通过插件扩展 Pinia 功能</li>\\n<li>为 JS 开发者提供适当的 TypeScript 支持以及<strong>自动补全</strong>功能。</li>\\n<li>支持服务端渲染</li>\\n</ul>","autoDesc":true}');export{t as data};
