const e=JSON.parse('{"key":"v-1aacc34f","path":"/web/vue/learn/components/%E8%AE%A4%E8%AF%86%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91.html","title":"认识组件化开发","lang":"zh-CN","frontmatter":{"title":"认识组件化开发","icon":"post","order":1,"date":"2023-10-31T00:00:00.000Z","description":"认识组件化开发 人面对复杂问题的处理方式： 任何一个人处理信息的逻辑能力都是有限的 所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。 但是，我们人有一种天生的能力，就是将问题进行拆解。 如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。 组件化也是类似的思想： 如果我们将一个页面中所有的处理逻辑 全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展； 但如果，我们讲一个页面拆分成一个个 小的功能块，每个功能块完成属于自己 这部分独立的功能，那么之后整个页面 的管理和维护就变得非常容易了； 如果我们将一个个功能块拆分后，就可 以像搭建积木一下来搭建我们的项目； 现在可以说整个的大前端开发都是组件化的天下，无论从三大框架（Vue、React、Angular），还是跨平台方案 的Flutter，甚至是移动端都在转向组件化开发，包括小程序的开发也是采用组件化开发的思想 所以，学习组件化最重要的是它的思想，每个框架或者平台可能实现方法不同，但是思想都是一样的。 我们需要通过组件化的思想来思考整个应用程序： 我们将一个完整的页面分成很多个组件； 每个组件都用于实现页面的一个功能块； 而每一个组件又可以进行细分； 而组件本身又可以在多个地方进行复用；","head":[["meta",{"property":"og:url","content":"https://brain.sunguoqi.com/web/vue/learn/components/%E8%AE%A4%E8%AF%86%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"Waite Wang"}],["meta",{"property":"og:title","content":"认识组件化开发"}],["meta",{"property":"og:description","content":"认识组件化开发 人面对复杂问题的处理方式： 任何一个人处理信息的逻辑能力都是有限的 所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。 但是，我们人有一种天生的能力，就是将问题进行拆解。 如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。 组件化也是类似的思想： 如果我们将一个页面中所有的处理逻辑 全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展； 但如果，我们讲一个页面拆分成一个个 小的功能块，每个功能块完成属于自己 这部分独立的功能，那么之后整个页面 的管理和维护就变得非常容易了； 如果我们将一个个功能块拆分后，就可 以像搭建积木一下来搭建我们的项目； 现在可以说整个的大前端开发都是组件化的天下，无论从三大框架（Vue、React、Angular），还是跨平台方案 的Flutter，甚至是移动端都在转向组件化开发，包括小程序的开发也是采用组件化开发的思想 所以，学习组件化最重要的是它的思想，每个框架或者平台可能实现方法不同，但是思想都是一样的。 我们需要通过组件化的思想来思考整个应用程序： 我们将一个完整的页面分成很多个组件； 每个组件都用于实现页面的一个功能块； 而每一个组件又可以进行细分； 而组件本身又可以在多个地方进行复用；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T15:02:57.000Z"}],["meta",{"property":"article:published_time","content":"2023-10-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-08T15:02:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"认识组件化开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-08T15:02:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"认识组件化开发","slug":"认识组件化开发","link":"#认识组件化开发","children":[]},{"level":2,"title":"Vue的组件化","slug":"vue的组件化","link":"#vue的组件化","children":[]},{"level":2,"title":"组件名称","slug":"组件名称","link":"#组件名称","children":[]},{"level":2,"title":"注册组件的方式","slug":"注册组件的方式","link":"#注册组件的方式","children":[{"level":3,"title":"注册全局组件","slug":"注册全局组件","link":"#注册全局组件","children":[]},{"level":3,"title":"注册局部组件","slug":"注册局部组件","link":"#注册局部组件","children":[]}]},{"level":2,"title":"Vue的开发模式","slug":"vue的开发模式","link":"#vue的开发模式","children":[]},{"level":2,"title":"如何支持SFC","slug":"如何支持sfc","link":"#如何支持sfc","children":[]},{"level":2,"title":"组件实例","slug":"组件实例","link":"#组件实例","children":[{"level":3,"title":"$refs","slug":"refs","link":"#refs","children":[]}]},{"level":2,"title":"组件的 v-model","slug":"组件的-v-model","link":"#组件的-v-model","children":[{"level":3,"title":"多个 v-model 绑定","slug":"多个-v-model-绑定","link":"#多个-v-model-绑定","children":[]}]}],"git":{"createdTime":1698759495000,"updatedTime":1702047777000,"contributors":[{"name":"Waite Wang","email":"waite@waite.wang","commits":2},{"name":"waite0603","email":"waite@waite.wang","commits":1}]},"readingTime":{"minutes":11.32,"words":3395},"filePathRelative":"web/vue/learn/components/认识组件化开发.md","localizedDate":"2023年10月31日","excerpt":"<h2> 认识组件化开发</h2>\\n<ul>\\n<li>人面对复杂问题的处理方式：\\n<ul>\\n<li>任何一个人处理信息的逻辑能力都是有限的</li>\\n<li>所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。</li>\\n<li>但是，我们人有一种天生的能力，就是将问题进行拆解。</li>\\n<li>如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。</li>\\n</ul>\\n</li>\\n<li>组件化也是类似的思想：\\n<ul>\\n<li>如果我们将一个页面中所有的处理逻辑 全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展；</li>\\n<li>但如果，我们讲一个页面拆分成一个个 小的功能块，每个功能块完成属于自己 这部分独立的功能，那么之后整个页面 的管理和维护就变得非常容易了；</li>\\n<li>如果我们将一个个功能块拆分后，就可 以像搭建积木一下来搭建我们的项目；</li>\\n</ul>\\n</li>\\n<li>现在可以说整个的大前端开发都是组件化的天下，无论从三大框架（Vue、React、Angular），还是跨平台方案 的Flutter，甚至是移动端都在转向组件化开发，包括小程序的开发也是采用组件化开发的思想</li>\\n<li>所以，学习组件化最重要的是它的思想，每个框架或者平台可能实现方法不同，但是思想都是一样的。</li>\\n<li>我们需要通过组件化的思想来思考整个应用程序：\\n<ul>\\n<li>我们将一个完整的页面分成很多个组件；</li>\\n<li>每个组件都用于实现页面的一个功能块；</li>\\n<li>而每一个组件又可以进行细分；</li>\\n<li>而组件本身又可以在多个地方进行复用；</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
