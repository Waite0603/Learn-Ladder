import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,a as s,b as n}from"./app-d35dd640.js";const p={},o=s(`<h1 id="day01-vuex" tabindex="-1"><a class="header-anchor" href="#day01-vuex" aria-hidden="true">#</a> Day01_vuex</h1><h2 id="今日学习目标-边讲边练" tabindex="-1"><a class="header-anchor" href="#今日学习目标-边讲边练" aria-hidden="true">#</a> 今日学习目标(边讲边练)</h2><ul><li>跨组件通信能力</li><li>vuex的基础使用</li><li>购物车案例-改装</li></ul><h2 id="_1-vuex介绍" tabindex="-1"><a class="header-anchor" href="#_1-vuex介绍" aria-hidden="true">#</a> 1.vuex介绍</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><ul><li>什么是vuex</li><li>为什么学习vuex</li></ul><h3 id="通信方案" tabindex="-1"><a class="header-anchor" href="#通信方案" aria-hidden="true">#</a> 通信方案</h3><figure><img src="https://qiniu.waite.wang/202312242346950.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>组件关系</th><th>数据通信</th></tr></thead><tbody><tr><td>父子关系</td><td>父传子：props ； 子传父：$emit</td></tr><tr><td>非父子关系</td><td>vuex (一种组件通信方案)</td></tr></tbody></table><h3 id="vuex是什么" tabindex="-1"><a class="header-anchor" href="#vuex是什么" aria-hidden="true">#</a> vuex是什么</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式</strong>存储管理数据，以相应的规则保证状态以一种可预测的方式发生变化</p><figure><img src="https://qiniu.waite.wang/202312242347862.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="vuex为何学" tabindex="-1"><a class="header-anchor" href="#vuex为何学" aria-hidden="true">#</a> vuex为何学</h3><p>程序页面多, 数据变量多</p><ol><li>不同组件数据<strong>保持同步</strong></li><li>数据的修改都是<strong>可追踪</strong></li></ol><p>一个户外商店有两名员工，张三和李四</p><p>一天的早上，他们分别对<strong>帐篷的数量</strong>做了一次盘点，发现一共有三个帐篷</p><p>张三卖出去俩个，他以为库存里还有<strong>一个</strong></p><p>李四卖出去一个，他以为库存里还有<strong>两个</strong></p><p>而事实上是，库存现在已经为<strong>零</strong></p><p>如果他们再接受客户的预订，就会出现库存<strong>不足</strong>的情况</p><blockquote><p>张三和李四因为没有保持库存的数量的同步导致了尴尬，这个就是所谓的<code>数据保持同步 </code></p><p>店长需要知道, 谁卖出了多少个帐篷，这个行为我们称之为<code>数据修改是可追踪的</code></p></blockquote><p>图示:</p><figure><img src="https://qiniu.waite.wang/202312242348361.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="vuex中存什么" tabindex="-1"><a class="header-anchor" href="#vuex中存什么" aria-hidden="true">#</a> vuex中存什么</h3><p><strong>多个组件共享状态</strong>，才存储在vuex中</p><p>某个组件中的私有数据，依旧存储在data中</p><p>例如：</p><ul><li><p>登陆的用户名需要在<strong>首页</strong>, <strong>个人中心</strong>, <strong>结算</strong>页面使用, 用户名存在vuex中</p></li><li><p>文章详情数据, 只有在文章详情页查看, 在自身data中声明</p></li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li>什么是vuex <ul><li>vuex是Vue官方推荐的集中式状态管理机制</li></ul></li><li>为何学vuex <ul><li>数据同步, 集中管理</li></ul></li><li>vuex中存什么 <ul><li>多个组件共享的值</li></ul></li></ol><h2 id="_2-vuex学习内容" tabindex="-1"><a class="header-anchor" href="#_2-vuex学习内容" aria-hidden="true">#</a> 2.vuex学习内容</h2><h3 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1" aria-hidden="true">#</a> 目标</h3><ul><li>知道vuex要学习什么</li></ul><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h3><ol><li><p>官网地址: https://vuex.vuejs.org/zh/</p></li><li><p>安装(固定)</p></li><li><p>配置项(固定)</p><table><thead><tr><th>配置项</th><th>含义</th><th>注意</th></tr></thead><tbody><tr><td><strong>state</strong></td><td>单一状态树</td><td>类似data</td></tr><tr><td><strong>mutations</strong></td><td>数据管家(同步)</td><td>唯一修改state地方</td></tr><tr><td>actions</td><td>异步请求</td><td>要改state需要提交给mutations</td></tr><tr><td>getters</td><td>vuex计算属性</td><td>类似computed</td></tr><tr><td>modules</td><td>模块拆分</td><td></td></tr></tbody></table></li></ol><h3 id="图示关系" tabindex="-1"><a class="header-anchor" href="#图示关系" aria-hidden="true">#</a> 图示关系</h3><p>单一定义store对象, 里面5个配置项, 在任意组件可以使用</p><figure><img src="https://qiniu.waite.wang/202312242348351.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ol><li>vuex五个核心概念是? <ul><li>state / mutations / actions / getters / modules</li></ul></li></ol><h2 id="_3-vuex例子准备" tabindex="-1"><a class="header-anchor" href="#_3-vuex例子准备" aria-hidden="true">#</a> 3.vuex例子准备</h2><h3 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2" aria-hidden="true">#</a> 目标</h3><ul><li>创建项目, 为学习准备 <ul><li><p>需求1: App.vue(作为根组件)</p></li><li><p>需求2: 子组件Add和子组件Sub, 嵌入在App.vue里</p></li><li><p>需求3: 三个组件共享库存数据(<strong>保持同步</strong>)</p><figure><img src="https://qiniu.waite.wang/202312242348672.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li></ul><h3 id="工程准备" tabindex="-1"><a class="header-anchor" href="#工程准备" aria-hidden="true">#</a> 工程准备</h3><ol><li><p>初始化新的工程 vuex-demo</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue create vuex<span class="token operator">-</span>demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>清空欢迎界面</p></li><li><p>并设置如下三个组件, 目录如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">|</span><span class="token operator">-</span>components
<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>AddItem<span class="token punctuation">.</span>vue
<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>SubItem<span class="token punctuation">.</span>vue
<span class="token operator">|</span><span class="token operator">-</span>App<span class="token punctuation">.</span>vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="app-vue" tabindex="-1"><a class="header-anchor" href="#app-vue" aria-hidden="true">#</a> App.vue</h3><blockquote><p>复制标签和样式, 引入AddItem和SubItem2个子组件显示</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>根组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>库存总数:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span>1px solid black<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AddItem</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span>1px solid black<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SubItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SubItem</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> AddItem <span class="token keyword">from</span> <span class="token string">&#39;@/components/AddItem&#39;</span>
<span class="token keyword">import</span> SubItem <span class="token keyword">from</span> <span class="token string">&#39;@/components/SubItem&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    AddItem<span class="token punctuation">,</span>
    SubItem
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">#app</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 20px auto<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span>1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="additem-vue" tabindex="-1"><a class="header-anchor" href="#additem-vue" aria-hidden="true">#</a> AddItem.vue</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>AddItem组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知库存数: 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>库存+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subitem-vue" tabindex="-1"><a class="header-anchor" href="#subitem-vue" aria-hidden="true">#</a> SubItem.vue</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>SubItem组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知库存数: 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>库存-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><ol><li>App下套用了AddItem和SubItem, 要在3个组件共享一个数据</li></ol><h2 id="_4-vuex-store准备" tabindex="-1"><a class="header-anchor" href="#_4-vuex-store准备" aria-hidden="true">#</a> 4.vuex-store准备</h2><h3 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3" aria-hidden="true">#</a> 目标</h3><ul><li>创建store仓库</li><li>注入到Vue项目中</li></ul><h3 id="store概念" tabindex="-1"><a class="header-anchor" href="#store概念" aria-hidden="true">#</a> store概念</h3><p>每个 Vuex 应用的核心 store（仓库）, 包含5个核心概念</p><figure><img src="https://qiniu.waite.wang/202312242351180.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="vuex目录" tabindex="-1"><a class="header-anchor" href="#vuex目录" aria-hidden="true">#</a> vuex目录</h3><p>和路由模块router/index.js - 类似, 维护项目目录的整洁，新建src/store/index.js文件</p><blockquote><p>当然， 这个步骤并不是必需的</p></blockquote><figure><img src="https://qiniu.waite.wang/202312242353021.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><ol><li><p>工程中 - 下载vuex</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> vuex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>store/index.js - 创建定义导出store对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标: 创建store仓库对象</span>
<span class="token comment">// 1. 下载vuex: 终端命令(yarn add vuex)</span>
<span class="token comment">// 2. 引入vuex</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token comment">// 3. 注册</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>
<span class="token comment">// 4. 实例化store对象</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 5. 导出store对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>main.js - 导入注入到Vue中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;@/store&#39;</span> <span class="token comment">// 导入store对象</span>

Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 6. 注入到Vue实例中(确保组件this.$store使用) // this.$store = store</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>请再次回忆一下vue-router的用法，是不是很像？</p><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><ol><li><p>vuex的核心是什么?</p><ul><li>store对象(包含5个核心属性)</li></ul></li><li><p>如何创建store对象?</p><ul><li>工程下载vuex模块</li><li>store/index.js <ul><li>引入注册</li><li>生成store对象导出</li><li>main.js - 导入注入</li></ul></li></ul></li></ol><h2 id="_5-vuex-state数据源" tabindex="-1"><a class="header-anchor" href="#_5-vuex-state数据源" aria-hidden="true">#</a> 5.vuex-state数据源</h2><h3 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4" aria-hidden="true">#</a> 目标</h3><ul><li>定义state</li><li>直接使用state</li><li>辅助函数mapState</li></ul><blockquote><p>state是唯一的公共数据源，统一存储</p></blockquote><h3 id="定义state" tabindex="-1"><a class="header-anchor" href="#定义state" aria-hidden="true">#</a> 定义state</h3><p>在store/index.js定义state</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
const store = new Vuex.Store({
    state: {
        变量名: 初始值
    }
})	
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token comment">// 库存</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用state2种方式" tabindex="-1"><a class="header-anchor" href="#使用state2种方式" aria-hidden="true">#</a> 使用state2种方式</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>变量名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方式2: 组件内 - <strong>映射</strong>使用 (推荐)</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 拿到mapState辅助函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 把state里变量映射到计算属性中</span>
        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;state里的变量名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="additem直接用" tabindex="-1"><a class="header-anchor" href="#additem直接用" aria-hidden="true">#</a> AddItem直接用</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>AddItem组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知库存数: {{ $store.state.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>库存+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app-vue直接用" tabindex="-1"><a class="header-anchor" href="#app-vue直接用" aria-hidden="true">#</a> App.vue直接用</h3><p>计算属性count, 和输入框的v-model双向绑定</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subitem映射用" tabindex="-1"><a class="header-anchor" href="#subitem映射用" aria-hidden="true">#</a> SubItem映射用</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>SubItem组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知库存数: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>库存-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 需求1: 映射state到计算属性</span>
<span class="token comment">// 1. 拿到辅助函数 mapState</span>
<span class="token comment">// 2. 在computed内, ...mapState([&#39;state变量名&#39;])</span>
<span class="token comment">// 3. 当计算属性使用</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token comment">// let r = mapState([&#39;count&#39;]) // 提取store里的state叫count的变量</span>
<span class="token comment">// console.log(r); // 返回值: {count: 函数体(return state里count的值)}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 映射count, 得到对象展开, 合并到计算属性中</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个过程的示意图如下</p><figure><img src="https://qiniu.waite.wang/202312242355459.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>state是响应式的, 只要state值变化, 页面上使用的地方会自动更新同步</p><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3>`,94),i=n("ol",null,[n("li",null,[n("p",null,"state作用?"),n("p",null,"定义全局状态数据源")]),n("li",{"变量名:":"",初始值:""},[n("p",null,"state如何定义?"),n("p",null,"在store内, state:")]),n("li",null,[n("p",null,"state的值如何用到具体vue组件内?"),n("ul",null,[n("li",null,"直接使用 this.$store.state.变量名"),n("li",null,"映射使用 ...mapState(['state的变量名'])")])])],-1),c=s(`<h2 id="_6-vuex-mutations定义-同步修改" tabindex="-1"><a class="header-anchor" href="#_6-vuex-mutations定义-同步修改" aria-hidden="true">#</a> 6.vuex-mutations定义-同步修改</h2><h3 id="目标-5" tabindex="-1"><a class="header-anchor" href="#目标-5" aria-hidden="true">#</a> 目标</h3><ul><li>定义mutations</li></ul><h3 id="定义mutations" tabindex="-1"><a class="header-anchor" href="#定义mutations" aria-hidden="true">#</a> 定义mutations</h3><blockquote><p>mutations类似数据管家, 操作state里的数据</p></blockquote><p>在store/index.js定义mutations</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
const store  = new Vuex.Store({
	mutations: {
		函数名 (state, 可选值) {
			// 同步修改state值代码
		}
	}
})
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token comment">// 库存</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">addCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 负责增加库存的管家</span>
			state<span class="token punctuation">.</span>count <span class="token operator">+=</span> value
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">subCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 负责减少库存的管家</span>
            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> value
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">setCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 负责直接修改库存的管家</span>
            state<span class="token punctuation">.</span>count <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h3><blockquote><ol><li>mutations是<strong>唯一</strong>能修改state的地方, 确保<strong>调试工具</strong>可以追踪变化</li><li>mutations函数内, 只能写同步代码, 调试工具可追踪变化过程 <ul><li>因为调试工具要<strong>立刻</strong>产生一次记录, 所以必须是同步的</li></ul></li></ol></blockquote><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><ol><li><p>mutations里函数作用?</p><ul><li>负责修改state里的数据</li></ul></li><li><p>mutations只能写什么样的代码?</p><ul><li>同步流程的代码</li></ul></li></ol><h2 id="_7-vuex-mutations使用" tabindex="-1"><a class="header-anchor" href="#_7-vuex-mutations使用" aria-hidden="true">#</a> 7.vuex-mutations使用</h2><h3 id="目标-6" tabindex="-1"><a class="header-anchor" href="#目标-6" aria-hidden="true">#</a> 目标</h3><ul><li>使用mutations2种方式</li><li>mutations注意事项</li></ul><h3 id="使用mutations的2种方式" tabindex="-1"><a class="header-anchor" href="#使用mutations的2种方式" aria-hidden="true">#</a> 使用mutations的2种方式</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;mutations里的函数名&quot;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 拿到mapMutations辅助函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 把mutations里方法映射到原地</span>
        <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;mutations里的函数名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="additem直接用-1" tabindex="-1"><a class="header-anchor" href="#additem直接用-1" aria-hidden="true">#</a> AddItem直接用</h3><ul><li>点击事件绑定</li><li>提交mutations传入值</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addFn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>库存+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">addFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;addCount&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app-vue直接用-1" tabindex="-1"><a class="header-anchor" href="#app-vue直接用-1" aria-hidden="true">#</a> App.vue直接用</h3><ul><li>触发计算属性的set方法</li><li>提交mutations传入值</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>库存总数: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setCount&#39;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token comment">// 把表单值提交给store下的mutations</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subitem映射用-1" tabindex="-1"><a class="header-anchor" href="#subitem映射用-1" aria-hidden="true">#</a> SubItem映射用</h3><ul><li>点击事件</li><li>映射mutations的方法</li><li>调用mutations方法传值</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subFn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>库存-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 需求2: 映射mutations到方法里</span>
<span class="token comment">// 1. 拿到辅助函数 mapMutations</span>
<span class="token comment">// 2. 在methods内, ...mapMutations([&#39;mutations函数名&#39;])</span>
<span class="token comment">// 3. 当普通方法使用</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;subCount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">subFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意-2" tabindex="-1"><a class="header-anchor" href="#注意-2" aria-hidden="true">#</a> 注意</h3><blockquote><p>mutations函数上, 只能接收<strong>一个参数值</strong>, 如果传对个, 请传一个对象</p></blockquote><h3 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h3><ol><li><p>mutations有哪2种使用方式?</p><p>直接使用 this.$store.commit()</p><p>映射使用 mapMutations把方法映射到组件内直接调用</p></li><li><p>state, mutations, 视图组件, 3个关系是什么?</p></li></ol><figure><img src="https://qiniu.waite.wang/202312242355165.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8-vuex-actions定义-异步修改" tabindex="-1"><a class="header-anchor" href="#_8-vuex-actions定义-异步修改" aria-hidden="true">#</a> 8.vuex-actions定义-异步修改</h2><h3 id="目标-7" tabindex="-1"><a class="header-anchor" href="#目标-7" aria-hidden="true">#</a> 目标</h3><ul><li>定义actions</li></ul><h3 id="定义actions" tabindex="-1"><a class="header-anchor" href="#定义actions" aria-hidden="true">#</a> 定义actions</h3><p>在store/index.js定义actions</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
const store = new Vuex.Store({
	actions: {
		函数名 (store, 可选值) {
			// 异步代码, 把结果commit给mutations给state赋值
		}
	}
})
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...省略state和mutations此处</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">asyncAddCount</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 1秒后, 异步提交给add的mutations</span>
                store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;addCount&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">asyncSubCount</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 1秒后, 异步提交给sub的mutations</span>
                store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;subCount&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><ol><li><p>actions和mutations区别?</p><p>mutations里同步修改state</p><p>actions里放入异步操作</p></li><li><p>actions是否能操作state?</p><p>不建议, 要commit给mutations(为调试工具可追踪)</p></li><li><p>actions和mutations里函数, 第一个形参分别是什么?</p><p>mutations的是state</p><p>actions的是store</p></li></ol><h2 id="_9-vuex-actions使用" tabindex="-1"><a class="header-anchor" href="#_9-vuex-actions使用" aria-hidden="true">#</a> 9.vuex-actions使用</h2><h3 id="目标-8" tabindex="-1"><a class="header-anchor" href="#目标-8" aria-hidden="true">#</a> 目标</h3><ul><li>使用actions</li></ul><h3 id="使用actions的2种方式" tabindex="-1"><a class="header-anchor" href="#使用actions的2种方式" aria-hidden="true">#</a> 使用actions的2种方式</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;actions函数名&#39;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 拿到mapActions辅助函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 把actions里方法映射到原地</span>
        <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;actions里的函数名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="additem直接用-2" tabindex="-1"><a class="header-anchor" href="#additem直接用-2" aria-hidden="true">#</a> AddItem直接用</h3><ul><li>点击事件</li><li>dispatch触发action</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>asyncAddFn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>延迟1秒, 库存+5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">asyncAddFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;asyncAddCount&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subitem映射用-2" tabindex="-1"><a class="header-anchor" href="#subitem映射用-2" aria-hidden="true">#</a> SubItem映射用</h3><ul><li>点击事件</li><li>映射actions的方法</li><li>调用actions的方法传值</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>asyncSubFn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>延迟1秒, 库存-5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 需求3: 映射actions到方法里</span>
<span class="token comment">// 1. 拿到辅助函数 mapActions</span>
<span class="token comment">// 2. 在methods内, ...mapActions([&#39;actions函数名&#39;])</span>
<span class="token comment">// 3. 当普通方法使用</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;asyncSubCount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">asyncSubFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncSubCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h3><ol><li><p>actions使用方式?</p><p>方式1: this.$store.dispatch(&#39;actions方法名字&#39;, 值)</p><p>方式2: ...mapActions([&#39;actions里的方法名&#39;]) 映射到原地使用</p></li><li><p>视图组件, state, mutations, actions的关系是?</p></li></ol><figure><img src="https://qiniu.waite.wang/202312242356106.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_10-vuex-重构购物车-准备store" tabindex="-1"><a class="header-anchor" href="#_10-vuex-重构购物车-准备store" aria-hidden="true">#</a> 10.vuex-重构购物车-准备Store</h2><h3 id="目标-9" tabindex="-1"><a class="header-anchor" href="#目标-9" aria-hidden="true">#</a> 目标</h3><ul><li>在现有项目如何集成vuex</li></ul><h3 id="store准备" tabindex="-1"><a class="header-anchor" href="#store准备" aria-hidden="true">#</a> store准备</h3><ol><li>复制预习资料&lt;shopcar-模板&gt;到自己今天文件夹下</li><li>下载vuex</li><li>store/index.js创建导出store对象</li><li>main.js把store引入, 然后注入到Vue实例</li></ol><h3 id="小结-9" tabindex="-1"><a class="header-anchor" href="#小结-9" aria-hidden="true">#</a> 小结</h3><ol><li><p>现有项目如何集成vuex</p><p>下载vuex</p><p>创建store对象并注入到Vue实例中</p></li></ol><h2 id="_11-vuex-重构购物车-配置项-上午结束" tabindex="-1"><a class="header-anchor" href="#_11-vuex-重构购物车-配置项-上午结束" aria-hidden="true">#</a> 11.vuex-重构购物车-配置项(上午结束)</h2><h3 id="目标-10" tabindex="-1"><a class="header-anchor" href="#目标-10" aria-hidden="true">#</a> 目标</h3><ul><li>准备state和mutations还有actions</li></ul><h3 id="配置项准备" tabindex="-1"><a class="header-anchor" href="#配置项准备" aria-hidden="true">#</a> 配置项准备</h3><ol><li>定义state - 保存商品列表数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">goodsList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 列表</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义mutations - 给state里变量赋值</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">setGoodsList</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> newList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>goodsList <span class="token operator">=</span> newList
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>定义actions - 异步请求数据提交给mutations</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">asyncGetGoodsList</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://www.escook.cn/api/cart</span><span class="token template-punctuation string">\`</span></span>
        <span class="token comment">// 发送异步请求</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> url <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setGoodsList&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span> <span class="token comment">// 提交mutation修改state中的数据</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app-vue使用vuex" tabindex="-1"><a class="header-anchor" href="#app-vue使用vuex" aria-hidden="true">#</a> App.vue使用vuex</h3><ul><li>把vuex商品数组映射回来使用</li><li>网络请求调用actions方法</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token string">&#39;goodsList&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 自定义原地属性名list, 映射vuex里的goodsList变量值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncGetGoodsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;asyncGetGoodsList&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">allFn</span><span class="token punctuation">(</span><span class="token parameter">bool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>goods_state <span class="token operator">=</span> bool<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-10" tabindex="-1"><a class="header-anchor" href="#小结-10" aria-hidden="true">#</a> 小结</h3><ol><li><p>mapState可以改变映射到原地的计算属性名吗?</p><p>可以的, 格式...mapState({&#39;&#39;计算属性名&#39;, &#39;state里要映射的变量名&#39;})</p></li></ol><h2 id="_12-vuex-getters定义-计算属性" tabindex="-1"><a class="header-anchor" href="#_12-vuex-getters定义-计算属性" aria-hidden="true">#</a> 12.vuex-getters定义-计算属性</h2><h3 id="目标-11" tabindex="-1"><a class="header-anchor" href="#目标-11" aria-hidden="true">#</a> 目标</h3><ul><li>getters概念</li><li>定义getters</li></ul><h3 id="getters概念" tabindex="-1"><a class="header-anchor" href="#getters概念" aria-hidden="true">#</a> getters概念</h3><p>vuex身上的全局状态-计算属性, 类似于computed</p><p>getters 依赖于 state中原始数据的变化，并返回计算后的新数据</p><h3 id="定义getters" tabindex="-1"><a class="header-anchor" href="#定义getters" aria-hidden="true">#</a> 定义getters</h3><p>在store/index.js定义getters</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
const store = new Vuex.Store({
	getters: {
		计算属性名 (state) {
			return 值给计算属性
		}
	}
})
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...省略其他</span>
    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">allCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>goods_state <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 选中商品才累加数量</span>
                    sum <span class="token operator">+=</span> obj<span class="token punctuation">.</span>goods_count<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">allPrice</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sum <span class="token operator">+=</span> obj<span class="token punctuation">.</span>goods_count <span class="token operator">*</span> obj<span class="token punctuation">.</span>goods_price
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-11" tabindex="-1"><a class="header-anchor" href="#小结-11" aria-hidden="true">#</a> 小结</h3><ol><li><p>getters有什么用?</p><p>vuex里的计算属性, 属于全局计算属性, 类似computed</p></li></ol><h2 id="_13-vuex-getters使用" tabindex="-1"><a class="header-anchor" href="#_13-vuex-getters使用" aria-hidden="true">#</a> 13.vuex-getters使用</h2><h3 id="目标-12" tabindex="-1"><a class="header-anchor" href="#目标-12" aria-hidden="true">#</a> 目标</h3><ul><li>组件内使用getters</li></ul><h3 id="使用getters的2种方式" tabindex="-1"><a class="header-anchor" href="#使用getters的2种方式" aria-hidden="true">#</a> 使用getters的2种方式</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>计算属性名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 拿到mapGetters辅助函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 把getters里属性映射到原地</span>
      <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;getters里的计算属性名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="myfooter-vue里使用" tabindex="-1"><a class="header-anchor" href="#myfooter-vue里使用" aria-hidden="true">#</a> MyFooter.vue里使用</h3><ul><li>使用2种方式给计算属性值</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">allCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>allCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;allPrice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-12" tabindex="-1"><a class="header-anchor" href="#小结-12" aria-hidden="true">#</a> 小结</h3><ol><li><p>getters如何使用?</p><p>方式1: this.$store.getters.计算属性名</p><p>方式2: ...mapGetters([&#39;getters里计算属性名&#39;])</p></li></ol><h2 id="_14-vuex-modules定义-分模块" tabindex="-1"><a class="header-anchor" href="#_14-vuex-modules定义-分模块" aria-hidden="true">#</a> 14.vuex-modules定义-分模块</h2><h3 id="目标-13" tabindex="-1"><a class="header-anchor" href="#目标-13" aria-hidden="true">#</a> 目标</h3><ul><li>为何要分模块</li><li>modules定义</li></ul><h3 id="为何分模块" tabindex="-1"><a class="header-anchor" href="#为何分模块" aria-hidden="true">#</a> 为何分模块</h3><figure><img src="https://qiniu.waite.wang/202312242359431.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="代码上的对比" tabindex="-1"><a class="header-anchor" href="#代码上的对比" aria-hidden="true">#</a> 代码上的对比</h3><figure><img src="https://qiniu.waite.wang/202312242357170.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="创建modules模块对象" tabindex="-1"><a class="header-anchor" href="#创建modules模块对象" aria-hidden="true">#</a> 创建modules模块对象</h3><ul><li>新建store/modules/user.js</li><li>新建store/modules/cart.js</li></ul><p>语法: 对象里包含5个核心概念, 只有state变成函数形式</p><p>user.js - 用户模块对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用户模块对象</span>
<span class="token keyword">const</span> userModule <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> userModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cart.js - 购物车模块对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 购物车模块对象</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token keyword">const</span> cartModule <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">goodsList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">setGoodsList</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> newList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>goodsList <span class="token operator">=</span> newList
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">async</span> <span class="token function">asyncGetGoodsList</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://www.escook.cn/api/cart</span><span class="token template-punctuation string">\`</span></span>
            <span class="token comment">// 发送异步请求</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> url <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setGoodsList&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span> <span class="token comment">// 提交mutation修改state中的数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">allCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>goods_state <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 选中商品才累加数量</span>
                    sum <span class="token operator">+=</span> obj<span class="token punctuation">.</span>goods_count<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">allPrice</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sum <span class="token operator">+=</span> obj<span class="token punctuation">.</span>goods_count <span class="token operator">*</span> obj<span class="token punctuation">.</span>goods_price
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> cartModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义modules" tabindex="-1"><a class="header-anchor" href="#定义modules" aria-hidden="true">#</a> 定义modules</h3><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">模块名</span><span class="token operator">:</span> 模块对象
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把2个模块对象, 引回到store里注册</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> cartModule <span class="token keyword">from</span> <span class="token string">&#39;./modules/cart&#39;</span>
<span class="token keyword">import</span> userModule <span class="token keyword">from</span> <span class="token string">&#39;./modules/user&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> userModule<span class="token punctuation">,</span>
        <span class="token literal-property property">cart</span><span class="token operator">:</span> cartModule
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-13" tabindex="-1"><a class="header-anchor" href="#小结-13" aria-hidden="true">#</a> 小结</h3><ol><li><p>为什么分模块?</p><p>集中式管理项目过大, 变量过多, 会导致state臃肿, 难以维护</p></li><li><p>如何分模块?</p><p>定义<strong>模块对象</strong>, state变成函数返回对象形式, 每个模块都有state/mutations/actions/getters/modules</p></li><li><p>根store如何注册?</p><p>modules里 { 模块名: <strong>模块对象</strong> }</p></li></ol><h2 id="_15-分模块-影响state取值方式" tabindex="-1"><a class="header-anchor" href="#_15-分模块-影响state取值方式" aria-hidden="true">#</a> 15.分模块-影响state取值方式</h2><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h3><ul><li>只要分模块, state取值方式改变, 其他暂时不变</li></ul><h3 id="state使用方式修改" tabindex="-1"><a class="header-anchor" href="#state使用方式修改" aria-hidden="true">#</a> state使用方式修改</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>变量名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分模块后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>模块名<span class="token punctuation">.</span>变量名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;state里变量名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;变量名&#39;</span><span class="token operator">:</span> <span class="token string">&quot;state里变量名&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 给映射过来的state起别的名字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分模块后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;变量名&#39;</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>模块名<span class="token punctuation">.</span>变量名
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="app-vue-修改" tabindex="-1"><a class="header-anchor" href="#app-vue-修改" aria-hidden="true">#</a> App.vue-修改</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...mapState({list: &#39;goodsList&#39;}) // 本地属性名list, 映射vuex里的goodsList变量值</span>
    <span class="token comment">// 方式1: 直接用</span>
    <span class="token comment">// list(){ // 这个list就是组件内普通的计算属性名</span>
    <span class="token comment">//     return this.$store.state.cart.goodsList </span>
    <span class="token comment">// }.</span>
    <span class="token comment">// 方式2: 映射方式改变</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;list&#39;</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>goodsList<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-14" tabindex="-1"><a class="header-anchor" href="#小结-14" aria-hidden="true">#</a> 小结</h3><ol><li><p>分模块对什么有影响?</p><p>对state的取值方式有影响, 对其他暂无影响</p></li><li><p>state如何取值?</p><p>在组件使用的时候, 要state.模块名.变量名</p></li></ol><h2 id="_16-分模块-命名空间" tabindex="-1"><a class="header-anchor" href="#_16-分模块-命名空间" aria-hidden="true">#</a> 16.分模块-命名空间</h2><h3 id="目标-14" tabindex="-1"><a class="header-anchor" href="#目标-14" aria-hidden="true">#</a> 目标</h3><ul><li>防止多个模块之间, mutations/actions/getters的名字冲突</li></ul><h3 id="开启命名空间" tabindex="-1"><a class="header-anchor" href="#开启命名空间" aria-hidden="true">#</a> 开启命名空间</h3><p>在模块对象内设置<code>namespaced: true</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> moduleShopCar <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state使用方式修改-1" tabindex="-1"><a class="header-anchor" href="#state使用方式修改-1" aria-hidden="true">#</a> state使用方式修改</h3><ul><li><p>直接使用无变化: this.$store.state.模块名.变量名</p></li><li><p>辅助函数需要遵守格式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">&quot;模块名&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;state变量名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="mutations使用方式修改" tabindex="-1"><a class="header-anchor" href="#mutations使用方式修改" aria-hidden="true">#</a> mutations使用方式修改</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;mutations里的函数名&quot;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;模块名/mutations里的函数名&quot;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;mutations里方法名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">&quot;模块名&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;mutations里方法名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="actions使用方式修改" tabindex="-1"><a class="header-anchor" href="#actions使用方式修改" aria-hidden="true">#</a> actions使用方式修改</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;actions里的函数名&quot;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;模块名/actions里的函数名&quot;</span><span class="token punctuation">,</span> 具体值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;actions里方法名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">&quot;模块名&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;actions里方法名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="getters使用方式修改" tabindex="-1"><a class="header-anchor" href="#getters使用方式修改" aria-hidden="true">#</a> getters使用方式修改</h3><ul><li><p>方式1: 组件内 - <strong>直接</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>计算属性名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">&#39;模块名/计算属性名&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>方式2: 组件内 - <strong>映射</strong>使用</p><ul><li><p>原语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;getters里计算属性名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开命名空间后语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">&quot;模块名&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;getters里计算属性名&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="小结-15" tabindex="-1"><a class="header-anchor" href="#小结-15" aria-hidden="true">#</a> 小结</h3><ol><li>state和mutations, 在根store和开启命名空间里的区别?</li></ol><figure><img src="https://qiniu.waite.wang/202312250000713.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>整个vuex的体系是?</li></ol><figure><img src="https://qiniu.waite.wang/202312250000731.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="扩展-使用devtools调试vuex数据" tabindex="-1"><a class="header-anchor" href="#扩展-使用devtools调试vuex数据" aria-hidden="true">#</a> 扩展: 使用Devtools调试vuex数据</h2><blockquote><p>优秀的调试工具可以使我们写程序事半功倍，最后我们再学习一下如果使用dev-tools来调试vuex中的数据，这也是数据可预测特性里不可缺少的一环</p></blockquote><h3 id="目标-15" tabindex="-1"><a class="header-anchor" href="#目标-15" aria-hidden="true">#</a> 目标</h3><ul><li>掌握dev-tools调试vuex</li><li>理解什么是数据状态是可追踪的</li></ul>`,157),l=[o,i,c];function u(r,d){return t(),e("div",null,l)}const m=a(p,[["render",u],["__file","vue2_vux.html.vue"]]);export{m as default};
